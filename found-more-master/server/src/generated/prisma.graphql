# source: http://prisma:4466/found/dev
# timestamp: Wed Feb 26 2020 21:50:37 GMT+0000 (UTC)

type Address implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  countryCode: String!
  country: String
  city: String!
  street: String!
  number: String
  postalCode: String!
  addition: String
  longtitude: Float
  latitude: Float
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  deletedAt: DateTime
  note: String
  countryCode: String!
  country: String
  city: String!
  street: String!
  number: String
  postalCode: String!
  addition: String
  longtitude: Float
  latitude: Float
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  countryCode_ASC
  countryCode_DESC
  country_ASC
  country_DESC
  city_ASC
  city_DESC
  street_ASC
  street_DESC
  number_ASC
  number_DESC
  postalCode_ASC
  postalCode_DESC
  addition_ASC
  addition_DESC
  longtitude_ASC
  longtitude_DESC
  latitude_ASC
  latitude_DESC
}

type AddressPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  countryCode: String!
  country: String
  city: String!
  street: String!
  number: String
  postalCode: String!
  addition: String
  longtitude: Float
  latitude: Float
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateDataInput {
  deletedAt: DateTime
  note: String
  countryCode: String
  country: String
  city: String
  street: String
  number: String
  postalCode: String
  addition: String
  longtitude: Float
  latitude: Float
}

input AddressUpdateInput {
  deletedAt: DateTime
  note: String
  countryCode: String
  country: String
  city: String
  street: String
  number: String
  postalCode: String
  addition: String
  longtitude: Float
  latitude: Float
}

input AddressUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  countryCode: String
  country: String
  city: String
  street: String
  number: String
  postalCode: String
  addition: String
  longtitude: Float
  latitude: Float
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
}

input AddressUpdateOneRequiredInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  addition: String

  """All values that are not equal to given value."""
  addition_not: String

  """All values that are contained in given list."""
  addition_in: [String!]

  """All values that are not contained in given list."""
  addition_not_in: [String!]

  """All values less than the given value."""
  addition_lt: String

  """All values less than or equal the given value."""
  addition_lte: String

  """All values greater than the given value."""
  addition_gt: String

  """All values greater than or equal the given value."""
  addition_gte: String

  """All values containing the given string."""
  addition_contains: String

  """All values not containing the given string."""
  addition_not_contains: String

  """All values starting with the given string."""
  addition_starts_with: String

  """All values not starting with the given string."""
  addition_not_starts_with: String

  """All values ending with the given string."""
  addition_ends_with: String

  """All values not ending with the given string."""
  addition_not_ends_with: String
  longtitude: Float

  """All values that are not equal to given value."""
  longtitude_not: Float

  """All values that are contained in given list."""
  longtitude_in: [Float!]

  """All values that are not contained in given list."""
  longtitude_not_in: [Float!]

  """All values less than the given value."""
  longtitude_lt: Float

  """All values less than or equal the given value."""
  longtitude_lte: Float

  """All values greater than the given value."""
  longtitude_gt: Float

  """All values greater than or equal the given value."""
  longtitude_gte: Float
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFilterOptions {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregateOrderTemplate {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductCategory {
  count: Int!
}

type AggregateProperties {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateRolePermission {
  count: Int!
}

type AggregateStore {
  count: Int!
}

type AggregateSupplier {
  count: Int!
}

type AggregateSupportPage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Brand implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: File
  backgroundImage: File
  stores(where: StoreWhereInput, orderBy: StoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Store!]
  address: Address
  productCategories(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductCategory!]
  orderTemplates(where: OrderTemplateWhereInput, orderBy: OrderTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderTemplate!]
  contactPerson: User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: FileCreateOneInput
  backgroundImage: FileCreateOneInput
  stores: StoreCreateManyWithoutBrandInput
  address: AddressCreateOneInput
  productCategories: ProductCategoryCreateManyWithoutBrandInput
  orderTemplates: OrderTemplateCreateManyWithoutBrandInput
  contactPerson: UserCreateOneWithoutContactPersonToBrandInput
  users: UserCreateManyWithoutBrandInput
}

input BrandCreateManyWithoutContactPersonInput {
  create: [BrandCreateWithoutContactPersonInput!]
  connect: [BrandWhereUniqueInput!]
}

input BrandCreateOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input BrandCreateOneWithoutOrderTemplatesInput {
  create: BrandCreateWithoutOrderTemplatesInput
  connect: BrandWhereUniqueInput
}

input BrandCreateOneWithoutProductCategoriesInput {
  create: BrandCreateWithoutProductCategoriesInput
  connect: BrandWhereUniqueInput
}

input BrandCreateOneWithoutStoresInput {
  create: BrandCreateWithoutStoresInput
  connect: BrandWhereUniqueInput
}

input BrandCreateOneWithoutUsersInput {
  create: BrandCreateWithoutUsersInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutContactPersonInput {
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: FileCreateOneInput
  backgroundImage: FileCreateOneInput
  stores: StoreCreateManyWithoutBrandInput
  address: AddressCreateOneInput
  productCategories: ProductCategoryCreateManyWithoutBrandInput
  orderTemplates: OrderTemplateCreateManyWithoutBrandInput
  users: UserCreateManyWithoutBrandInput
}

input BrandCreateWithoutOrderTemplatesInput {
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: FileCreateOneInput
  backgroundImage: FileCreateOneInput
  stores: StoreCreateManyWithoutBrandInput
  address: AddressCreateOneInput
  productCategories: ProductCategoryCreateManyWithoutBrandInput
  contactPerson: UserCreateOneWithoutContactPersonToBrandInput
  users: UserCreateManyWithoutBrandInput
}

input BrandCreateWithoutProductCategoriesInput {
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: FileCreateOneInput
  backgroundImage: FileCreateOneInput
  stores: StoreCreateManyWithoutBrandInput
  address: AddressCreateOneInput
  orderTemplates: OrderTemplateCreateManyWithoutBrandInput
  contactPerson: UserCreateOneWithoutContactPersonToBrandInput
  users: UserCreateManyWithoutBrandInput
}

input BrandCreateWithoutStoresInput {
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: FileCreateOneInput
  backgroundImage: FileCreateOneInput
  address: AddressCreateOneInput
  productCategories: ProductCategoryCreateManyWithoutBrandInput
  orderTemplates: OrderTemplateCreateManyWithoutBrandInput
  contactPerson: UserCreateOneWithoutContactPersonToBrandInput
  users: UserCreateManyWithoutBrandInput
}

input BrandCreateWithoutUsersInput {
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
  logo: FileCreateOneInput
  backgroundImage: FileCreateOneInput
  stores: StoreCreateManyWithoutBrandInput
  address: AddressCreateOneInput
  productCategories: ProductCategoryCreateManyWithoutBrandInput
  orderTemplates: OrderTemplateCreateManyWithoutBrandInput
  contactPerson: UserCreateOneWithoutContactPersonToBrandInput
}

"""An edge in a connection."""
type BrandEdge {
  """The item at the end of the edge."""
  node: Brand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  domain_ASC
  domain_DESC
  name_ASC
  name_DESC
  primaryColor_ASC
  primaryColor_DESC
  secondaryColor_ASC
  secondaryColor_DESC
  textColor_ASC
  textColor_DESC
}

type BrandPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  domain: String!
  name: String!
  primaryColor: String!
  secondaryColor: String!
  textColor: String!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
}

input BrandUpdateDataInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  stores: StoreUpdateManyWithoutBrandInput
  address: AddressUpdateOneInput
  productCategories: ProductCategoryUpdateManyWithoutBrandInput
  orderTemplates: OrderTemplateUpdateManyWithoutBrandInput
  contactPerson: UserUpdateOneWithoutContactPersonToBrandInput
  users: UserUpdateManyWithoutBrandInput
}

input BrandUpdateInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  stores: StoreUpdateManyWithoutBrandInput
  address: AddressUpdateOneInput
  productCategories: ProductCategoryUpdateManyWithoutBrandInput
  orderTemplates: OrderTemplateUpdateManyWithoutBrandInput
  contactPerson: UserUpdateOneWithoutContactPersonToBrandInput
  users: UserUpdateManyWithoutBrandInput
}

input BrandUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
}

input BrandUpdateManyWithoutContactPersonInput {
  create: [BrandCreateWithoutContactPersonInput!]
  connect: [BrandWhereUniqueInput!]
  disconnect: [BrandWhereUniqueInput!]
  delete: [BrandWhereUniqueInput!]
  update: [BrandUpdateWithWhereUniqueWithoutContactPersonInput!]
  upsert: [BrandUpsertWithWhereUniqueWithoutContactPersonInput!]
}

input BrandUpdateOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BrandUpdateDataInput
  upsert: BrandUpsertNestedInput
}

input BrandUpdateOneRequiredWithoutOrderTemplatesInput {
  create: BrandCreateWithoutOrderTemplatesInput
  connect: BrandWhereUniqueInput
  update: BrandUpdateWithoutOrderTemplatesDataInput
  upsert: BrandUpsertWithoutOrderTemplatesInput
}

input BrandUpdateOneRequiredWithoutUsersInput {
  create: BrandCreateWithoutUsersInput
  connect: BrandWhereUniqueInput
  update: BrandUpdateWithoutUsersDataInput
  upsert: BrandUpsertWithoutUsersInput
}

input BrandUpdateOneWithoutProductCategoriesInput {
  create: BrandCreateWithoutProductCategoriesInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BrandUpdateWithoutProductCategoriesDataInput
  upsert: BrandUpsertWithoutProductCategoriesInput
}

input BrandUpdateOneWithoutStoresInput {
  create: BrandCreateWithoutStoresInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BrandUpdateWithoutStoresDataInput
  upsert: BrandUpsertWithoutStoresInput
}

input BrandUpdateWithoutContactPersonDataInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  stores: StoreUpdateManyWithoutBrandInput
  address: AddressUpdateOneInput
  productCategories: ProductCategoryUpdateManyWithoutBrandInput
  orderTemplates: OrderTemplateUpdateManyWithoutBrandInput
  users: UserUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutOrderTemplatesDataInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  stores: StoreUpdateManyWithoutBrandInput
  address: AddressUpdateOneInput
  productCategories: ProductCategoryUpdateManyWithoutBrandInput
  contactPerson: UserUpdateOneWithoutContactPersonToBrandInput
  users: UserUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutProductCategoriesDataInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  stores: StoreUpdateManyWithoutBrandInput
  address: AddressUpdateOneInput
  orderTemplates: OrderTemplateUpdateManyWithoutBrandInput
  contactPerson: UserUpdateOneWithoutContactPersonToBrandInput
  users: UserUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutStoresDataInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  address: AddressUpdateOneInput
  productCategories: ProductCategoryUpdateManyWithoutBrandInput
  orderTemplates: OrderTemplateUpdateManyWithoutBrandInput
  contactPerson: UserUpdateOneWithoutContactPersonToBrandInput
  users: UserUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutUsersDataInput {
  deletedAt: DateTime
  note: String
  domain: String
  name: String
  primaryColor: String
  secondaryColor: String
  textColor: String
  logo: FileUpdateOneInput
  backgroundImage: FileUpdateOneInput
  stores: StoreUpdateManyWithoutBrandInput
  address: AddressUpdateOneInput
  productCategories: ProductCategoryUpdateManyWithoutBrandInput
  orderTemplates: OrderTemplateUpdateManyWithoutBrandInput
  contactPerson: UserUpdateOneWithoutContactPersonToBrandInput
}

input BrandUpdateWithWhereUniqueWithoutContactPersonInput {
  where: BrandWhereUniqueInput!
  data: BrandUpdateWithoutContactPersonDataInput!
}

input BrandUpsertNestedInput {
  update: BrandUpdateDataInput!
  create: BrandCreateInput!
}

input BrandUpsertWithoutOrderTemplatesInput {
  update: BrandUpdateWithoutOrderTemplatesDataInput!
  create: BrandCreateWithoutOrderTemplatesInput!
}

input BrandUpsertWithoutProductCategoriesInput {
  update: BrandUpdateWithoutProductCategoriesDataInput!
  create: BrandCreateWithoutProductCategoriesInput!
}

input BrandUpsertWithoutStoresInput {
  update: BrandUpdateWithoutStoresDataInput!
  create: BrandCreateWithoutStoresInput!
}

input BrandUpsertWithoutUsersInput {
  update: BrandUpdateWithoutUsersDataInput!
  create: BrandCreateWithoutUsersInput!
}

input BrandUpsertWithWhereUniqueWithoutContactPersonInput {
  where: BrandWhereUniqueInput!
  update: BrandUpdateWithoutContactPersonDataInput!
  create: BrandCreateWithoutContactPersonInput!
}

input BrandWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  domain: String

  """All values that are not equal to given value."""
  domain_not: String

  """All values that are contained in given list."""
  domain_in: [String!]

  """All values that are not contained in given list."""
  domain_not_in: [String!]

  """All values less than the given value."""
  domain_lt: String

  """All values less than or equal the given value."""
  domain_lte: String

  """All values greater than the given value."""
  domain_gt: String

  """All values greater than or equal the given value."""
  domain_gte: String

  """All values containing the given string."""
  domain_contains: String

  """All values not containing the given string."""
  domain_not_contains: String

  """All values starting with the given string."""
  domain_starts_with: String

  """All values not starting with the given string."""
  domain_not_starts_with: String

  """All values ending with the given string."""
  domain_ends_with: String

  """All values not ending with the given string."""
  domain_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  primaryColor: String

  """All values that are not equal to given value."""
  primaryColor_not: String

  """All values that are contained in given list."""
  primaryColor_in: [String!]

  """All values that are not contained in given list."""
  primaryColor_not_in: [String!]

  """All values less than the given value."""
  primaryColor_lt: String

  """All values less than or equal the given value."""
  primaryColor_lte: String

  """All values greater than the given value."""
  primaryColor_gt: String

  """All values greater than or equal the given value."""
  primaryColor_gte: String

  """All values containing the given string."""
  primaryColor_contains: String

  """All values not containing the given string."""
  primaryColor_not_contains: String

  """All values starting with the given string."""
  primaryColor_starts_with: String

  """All values not starting with the given string."""
  primaryColor_not_starts_with: String

  """All values ending with the given string."""
  primaryColor_ends_with: String

  """All values not ending with the given string."""
  primaryColor_not_ends_with: String
  secondaryColor: String

  """All values that are not equal to given value."""
  secondaryColor_not: String

  """All values that are contained in given list."""
  secondaryColor_in: [String!]

  """All values that are not contained in given list."""
  secondaryColor_not_in: [String!]

  """All values less than the given value."""
  secondaryColor_lt: String

  """All values less than or equal the given value."""
  secondaryColor_lte: String

  """All values greater than the given value."""
  secondaryColor_gt: String

  """All values greater than or equal the given value."""
  secondaryColor_gte: String

  """All values containing the given string."""
  secondaryColor_contains: String

  """All values not containing the given string."""
  secondaryColor_not_contains: String

  """All values starting with the given string."""
  secondaryColor_starts_with: String

  """All values not starting with the given string."""
  secondaryColor_not_starts_with: String

  """All values ending with the given string."""
  secondaryColor_ends_with: String

  """All values not ending with the given string."""
  secondaryColor_not_ends_with: String
  textColor: String

  """All values that are not equal to given value."""
  textColor_not: String

  """All values that are contained in given list."""
  textColor_in: [String!]

  """All values that are not contained in given list."""
  textColor_not_in: [String!]

  """All values less than the given value."""
  textColor_lt: String

  """All values less than or equal the given value."""
  textColor_lte: String

  """All values greater than the given value."""
  textColor_gt: String

  """All values greater than or equal the given value."""
  textColor_gte: String

  """All values containing the given string."""
  textColor_contains: String

  """All values not containing the given string."""
  textColor_not_contains: String

  """All values starting with the given string."""
  textColor_starts_with: String

  """All values not starting with the given string."""
  textColor_not_starts_with: String

  """All values ending with the given string."""
  textColor_ends_with: String

  """All values not ending with the given string."""
  textColor_not_ends_with: String
  logo: FileWhereInput
  backgroundImage: FileWhereInput
  stores_every: StoreWhereInput
  stores_some: StoreWhereInput
  stores_none: StoreWhereInput
  address: AddressWhereInput
  productCategories_every: ProductCategoryWhereInput
  productCategories_some: ProductCategoryWhereInput
  productCategories_none: ProductCategoryWhereInput
  orderTemplates_every: OrderTemplateWhereInput
  orderTemplates_some: OrderTemplateWhereInput
  orderTemplates_none: OrderTemplateWhereInput
  contactPerson: UserWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input BrandWhereUniqueInput {
  id: ID
  domain: String
}

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  content: String
  user: User!
  order: Order!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  deletedAt: DateTime
  note: String
  content: String
  user: UserCreateOneInput!
  order: OrderCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutOrderInput {
  create: [CommentCreateWithoutOrderInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutOrderInput {
  deletedAt: DateTime
  note: String
  content: String
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  content_ASC
  content_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  content: String
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  deletedAt: DateTime
  note: String
  content: String
  user: UserUpdateOneRequiredInput
  order: OrderUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  content: String
}

input CommentUpdateManyWithoutOrderInput {
  create: [CommentCreateWithoutOrderInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOrderInput!]
}

input CommentUpdateWithoutOrderDataInput {
  deletedAt: DateTime
  note: String
  content: String
  user: UserUpdateOneRequiredInput
}

input CommentUpdateWithWhereUniqueWithoutOrderInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutOrderDataInput!
}

input CommentUpsertWithWhereUniqueWithoutOrderInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutOrderDataInput!
  create: CommentCreateWithoutOrderInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  user: UserWhereInput
  order: OrderWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  originalName: String
  contentType: String
  mimeType: String!
  bucket: String!
  key: String!
  location: String!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  deletedAt: DateTime
  note: String
  originalName: String
  contentType: String
  mimeType: String!
  bucket: String!
  key: String!
  location: String!
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  originalName_ASC
  originalName_DESC
  contentType_ASC
  contentType_DESC
  mimeType_ASC
  mimeType_DESC
  bucket_ASC
  bucket_DESC
  key_ASC
  key_DESC
  location_ASC
  location_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  originalName: String
  contentType: String
  mimeType: String!
  bucket: String!
  key: String!
  location: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  deletedAt: DateTime
  note: String
  originalName: String
  contentType: String
  mimeType: String
  bucket: String
  key: String
  location: String
}

input FileUpdateInput {
  deletedAt: DateTime
  note: String
  originalName: String
  contentType: String
  mimeType: String
  bucket: String
  key: String
  location: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
}

input FileUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  originalName: String
  contentType: String
  mimeType: String
  bucket: String
  key: String
  location: String
}

input FileUpdateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  originalName: String

  """All values that are not equal to given value."""
  originalName_not: String

  """All values that are contained in given list."""
  originalName_in: [String!]

  """All values that are not contained in given list."""
  originalName_not_in: [String!]

  """All values less than the given value."""
  originalName_lt: String

  """All values less than or equal the given value."""
  originalName_lte: String

  """All values greater than the given value."""
  originalName_gt: String

  """All values greater than or equal the given value."""
  originalName_gte: String

  """All values containing the given string."""
  originalName_contains: String

  """All values not containing the given string."""
  originalName_not_contains: String

  """All values starting with the given string."""
  originalName_starts_with: String

  """All values not starting with the given string."""
  originalName_not_starts_with: String

  """All values ending with the given string."""
  originalName_ends_with: String

  """All values not ending with the given string."""
  originalName_not_ends_with: String
  contentType: String

  """All values that are not equal to given value."""
  contentType_not: String

  """All values that are contained in given list."""
  contentType_in: [String!]

  """All values that are not contained in given list."""
  contentType_not_in: [String!]

  """All values less than the given value."""
  contentType_lt: String

  """All values less than or equal the given value."""
  contentType_lte: String

  """All values greater than the given value."""
  contentType_gt: String

  """All values greater than or equal the given value."""
  contentType_gte: String

  """All values containing the given string."""
  contentType_contains: String

  """All values not containing the given string."""
  contentType_not_contains: String

  """All values starting with the given string."""
  contentType_starts_with: String

  """All values not starting with the given string."""
  contentType_not_starts_with: String

  """All values ending with the given string."""
  contentType_ends_with: String

  """All values not ending with the given string."""
  contentType_not_ends_with: String
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values less than the given value."""
  mimeType_lt: String

  """All values less than or equal the given value."""
  mimeType_lte: String

  """All values greater than the given value."""
  mimeType_gt: String

  """All values greater than or equal the given value."""
  mimeType_gte: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string."""
  mimeType_not_ends_with: String
  bucket: String

  """All values that are not equal to given value."""
  bucket_not: String

  """All values that are contained in given list."""
  bucket_in: [String!]

  """All values that are not contained in given list."""
  bucket_not_in: [String!]

  """All values less than the given value."""
  bucket_lt: String

  """All values less than or equal the given value."""
  bucket_lte: String

  """All values greater than the given value."""
  bucket_gt: String

  """All values greater than or equal the given value."""
  bucket_gte: String

  """All values containing the given string."""
  bucket_contains: String

  """All values not containing the given string."""
  bucket_not_contains: String

  """All values starting with the given string."""
  bucket_starts_with: String

  """All values not starting with the given string."""
  bucket_not_starts_with: String

  """All values ending with the given string."""
  bucket_ends_with: String

  """All values not ending with the given string."""
  bucket_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
}

type FilterOptions implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  type: FilterOptionsType
  language: Language
  storeType: String
  size: String
  currency: String
}

"""A connection to a list of items."""
type FilterOptionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FilterOptionsEdge]!
  aggregate: AggregateFilterOptions!
}

input FilterOptionsCreateInput {
  deletedAt: DateTime
  note: String
  type: FilterOptionsType
  storeType: String
  size: String
  currency: String
  language: LanguageCreateOneInput
}

input FilterOptionsCreateOneInput {
  create: FilterOptionsCreateInput
  connect: FilterOptionsWhereUniqueInput
}

"""An edge in a connection."""
type FilterOptionsEdge {
  """The item at the end of the edge."""
  node: FilterOptions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FilterOptionsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  type_ASC
  type_DESC
  storeType_ASC
  storeType_DESC
  size_ASC
  size_DESC
  currency_ASC
  currency_DESC
}

type FilterOptionsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  type: FilterOptionsType
  storeType: String
  size: String
  currency: String
}

type FilterOptionsSubscriptionPayload {
  mutation: MutationType!
  node: FilterOptions
  updatedFields: [String!]
  previousValues: FilterOptionsPreviousValues
}

input FilterOptionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterOptionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterOptionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterOptionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FilterOptionsWhereInput
}

enum FilterOptionsType {
  ALL
  ZERO_OR_ONE
  ONE
  ZERO_OR_MORE
  ONE_OR_MORE
}

input FilterOptionsUpdateDataInput {
  deletedAt: DateTime
  note: String
  type: FilterOptionsType
  storeType: String
  size: String
  currency: String
  language: LanguageUpdateOneInput
}

input FilterOptionsUpdateInput {
  deletedAt: DateTime
  note: String
  type: FilterOptionsType
  storeType: String
  size: String
  currency: String
  language: LanguageUpdateOneInput
}

input FilterOptionsUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  type: FilterOptionsType
  storeType: String
  size: String
  currency: String
}

input FilterOptionsUpdateOneInput {
  create: FilterOptionsCreateInput
  connect: FilterOptionsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FilterOptionsUpdateDataInput
  upsert: FilterOptionsUpsertNestedInput
}

input FilterOptionsUpsertNestedInput {
  update: FilterOptionsUpdateDataInput!
  create: FilterOptionsCreateInput!
}

input FilterOptionsWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterOptionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterOptionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterOptionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  type: FilterOptionsType

  """All values that are not equal to given value."""
  type_not: FilterOptionsType

  """All values that are contained in given list."""
  type_in: [FilterOptionsType!]

  """All values that are not contained in given list."""
  type_not_in: [FilterOptionsType!]
  storeType: String

  """All values that are not equal to given value."""
  storeType_not: String

  """All values that are contained in given list."""
  storeType_in: [String!]

  """All values that are not contained in given list."""
  storeType_not_in: [String!]

  """All values less than the given value."""
  storeType_lt: String

  """All values less than or equal the given value."""
  storeType_lte: String

  """All values greater than the given value."""
  storeType_gt: String

  """All values greater than or equal the given value."""
  storeType_gte: String

  """All values containing the given string."""
  storeType_contains: String

  """All values not containing the given string."""
  storeType_not_contains: String

  """All values starting with the given string."""
  storeType_starts_with: String

  """All values not starting with the given string."""
  storeType_not_starts_with: String

  """All values ending with the given string."""
  storeType_ends_with: String

  """All values not ending with the given string."""
  storeType_not_ends_with: String
  size: String

  """All values that are not equal to given value."""
  size_not: String

  """All values that are contained in given list."""
  size_in: [String!]

  """All values that are not contained in given list."""
  size_not_in: [String!]

  """All values less than the given value."""
  size_lt: String

  """All values less than or equal the given value."""
  size_lte: String

  """All values greater than the given value."""
  size_gt: String

  """All values greater than or equal the given value."""
  size_gte: String

  """All values containing the given string."""
  size_contains: String

  """All values not containing the given string."""
  size_not_contains: String

  """All values starting with the given string."""
  size_starts_with: String

  """All values not starting with the given string."""
  size_not_starts_with: String

  """All values ending with the given string."""
  size_ends_with: String

  """All values not ending with the given string."""
  size_not_ends_with: String
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  language: LanguageWhereInput
}

input FilterOptionsWhereUniqueInput {
  id: ID
}

type Language implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  isoCode: String!
  articleCode: String!
  name: String!
}

"""A connection to a list of items."""
type LanguageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  deletedAt: DateTime
  note: String
  isoCode: String!
  articleCode: String!
  name: String!
}

input LanguageCreateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  isoCode_ASC
  isoCode_DESC
  articleCode_ASC
  articleCode_DESC
  name_ASC
  name_DESC
}

type LanguagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  isoCode: String!
  articleCode: String!
  name: String!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
}

input LanguageUpdateDataInput {
  deletedAt: DateTime
  note: String
  isoCode: String
  articleCode: String
  name: String
}

input LanguageUpdateInput {
  deletedAt: DateTime
  note: String
  isoCode: String
  articleCode: String
  name: String
}

input LanguageUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  isoCode: String
  articleCode: String
  name: String
}

input LanguageUpdateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
}

input LanguageUpsertNestedInput {
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  isoCode: String

  """All values that are not equal to given value."""
  isoCode_not: String

  """All values that are contained in given list."""
  isoCode_in: [String!]

  """All values that are not contained in given list."""
  isoCode_not_in: [String!]

  """All values less than the given value."""
  isoCode_lt: String

  """All values less than or equal the given value."""
  isoCode_lte: String

  """All values greater than the given value."""
  isoCode_gt: String

  """All values greater than or equal the given value."""
  isoCode_gte: String

  """All values containing the given string."""
  isoCode_contains: String

  """All values not containing the given string."""
  isoCode_not_contains: String

  """All values starting with the given string."""
  isoCode_starts_with: String

  """All values not starting with the given string."""
  isoCode_not_starts_with: String

  """All values ending with the given string."""
  isoCode_ends_with: String

  """All values not ending with the given string."""
  isoCode_not_ends_with: String
  articleCode: String

  """All values that are not equal to given value."""
  articleCode_not: String

  """All values that are contained in given list."""
  articleCode_in: [String!]

  """All values that are not contained in given list."""
  articleCode_not_in: [String!]

  """All values less than the given value."""
  articleCode_lt: String

  """All values less than or equal the given value."""
  articleCode_lte: String

  """All values greater than the given value."""
  articleCode_gt: String

  """All values greater than or equal the given value."""
  articleCode_gte: String

  """All values containing the given string."""
  articleCode_contains: String

  """All values not containing the given string."""
  articleCode_not_contains: String

  """All values starting with the given string."""
  articleCode_starts_with: String

  """All values not starting with the given string."""
  articleCode_not_starts_with: String

  """All values ending with the given string."""
  articleCode_ends_with: String

  """All values not ending with the given string."""
  articleCode_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LanguageWhereUniqueInput {
  id: ID
  isoCode: String
  articleCode: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStore(data: StoreCreateInput!): Store!
  createRole(data: RoleCreateInput!): Role!
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory!
  createProperties(data: PropertiesCreateInput!): Properties!
  createOrder(data: OrderCreateInput!): Order!
  createComment(data: CommentCreateInput!): Comment!
  createSupplier(data: SupplierCreateInput!): Supplier!
  createSupportPage(data: SupportPageCreateInput!): SupportPage!
  createNotification(data: NotificationCreateInput!): Notification!
  createUser(data: UserCreateInput!): User!
  createOrderTemplate(data: OrderTemplateCreateInput!): OrderTemplate!
  createFilterOptions(data: FilterOptionsCreateInput!): FilterOptions!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createRolePermission(data: RolePermissionCreateInput!): RolePermission!
  createBrand(data: BrandCreateInput!): Brand!
  createFile(data: FileCreateInput!): File!
  createProduct(data: ProductCreateInput!): Product!
  createLanguage(data: LanguageCreateInput!): Language!
  createAddress(data: AddressCreateInput!): Address!
  updateStore(data: StoreUpdateInput!, where: StoreWhereUniqueInput!): Store
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateProductCategory(data: ProductCategoryUpdateInput!, where: ProductCategoryWhereUniqueInput!): ProductCategory
  updateProperties(data: PropertiesUpdateInput!, where: PropertiesWhereUniqueInput!): Properties
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
  updateSupportPage(data: SupportPageUpdateInput!, where: SupportPageWhereUniqueInput!): SupportPage
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOrderTemplate(data: OrderTemplateUpdateInput!, where: OrderTemplateWhereUniqueInput!): OrderTemplate
  updateFilterOptions(data: FilterOptionsUpdateInput!, where: FilterOptionsWhereUniqueInput!): FilterOptions
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateRolePermission(data: RolePermissionUpdateInput!, where: RolePermissionWhereUniqueInput!): RolePermission
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteProperties(where: PropertiesWhereUniqueInput!): Properties
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
  deleteSupportPage(where: SupportPageWhereUniqueInput!): SupportPage
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteUser(where: UserWhereUniqueInput!): User
  deleteOrderTemplate(where: OrderTemplateWhereUniqueInput!): OrderTemplate
  deleteFilterOptions(where: FilterOptionsWhereUniqueInput!): FilterOptions
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteRolePermission(where: RolePermissionWhereUniqueInput!): RolePermission
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteFile(where: FileWhereUniqueInput!): File
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteAddress(where: AddressWhereUniqueInput!): Address
  upsertStore(where: StoreWhereUniqueInput!, create: StoreCreateInput!, update: StoreUpdateInput!): Store!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertProductCategory(where: ProductCategoryWhereUniqueInput!, create: ProductCategoryCreateInput!, update: ProductCategoryUpdateInput!): ProductCategory!
  upsertProperties(where: PropertiesWhereUniqueInput!, create: PropertiesCreateInput!, update: PropertiesUpdateInput!): Properties!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertSupplier(where: SupplierWhereUniqueInput!, create: SupplierCreateInput!, update: SupplierUpdateInput!): Supplier!
  upsertSupportPage(where: SupportPageWhereUniqueInput!, create: SupportPageCreateInput!, update: SupportPageUpdateInput!): SupportPage!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertOrderTemplate(where: OrderTemplateWhereUniqueInput!, create: OrderTemplateCreateInput!, update: OrderTemplateUpdateInput!): OrderTemplate!
  upsertFilterOptions(where: FilterOptionsWhereUniqueInput!, create: FilterOptionsCreateInput!, update: FilterOptionsUpdateInput!): FilterOptions!
  upsertOrderItem(where: OrderItemWhereUniqueInput!, create: OrderItemCreateInput!, update: OrderItemUpdateInput!): OrderItem!
  upsertRolePermission(where: RolePermissionWhereUniqueInput!, create: RolePermissionCreateInput!, update: RolePermissionUpdateInput!): RolePermission!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  updateManyStores(data: StoreUpdateManyMutationInput!, where: StoreWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyProductCategories(data: ProductCategoryUpdateManyMutationInput!, where: ProductCategoryWhereInput): BatchPayload!
  updateManyPropertieses(data: PropertiesUpdateManyMutationInput!, where: PropertiesWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManySuppliers(data: SupplierUpdateManyMutationInput!, where: SupplierWhereInput): BatchPayload!
  updateManySupportPages(data: SupportPageUpdateManyMutationInput!, where: SupportPageWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyOrderTemplates(data: OrderTemplateUpdateManyMutationInput!, where: OrderTemplateWhereInput): BatchPayload!
  updateManyFilterOptionses(data: FilterOptionsUpdateManyMutationInput!, where: FilterOptionsWhereInput): BatchPayload!
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  updateManyRolePermissions(data: RolePermissionUpdateManyMutationInput!, where: RolePermissionWhereInput): BatchPayload!
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  deleteManyStores(where: StoreWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyProductCategories(where: ProductCategoryWhereInput): BatchPayload!
  deleteManyPropertieses(where: PropertiesWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManySuppliers(where: SupplierWhereInput): BatchPayload!
  deleteManySupportPages(where: SupportPageWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyOrderTemplates(where: OrderTemplateWhereInput): BatchPayload!
  deleteManyFilterOptionses(where: FilterOptionsWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyRolePermissions(where: RolePermissionWhereInput): BatchPayload!
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
  readAt: DateTime
  link: String
  user: User!
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
  readAt: DateTime
  link: String
  user: UserCreateOneWithoutNotificationsInput!
}

input NotificationCreateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
  readAt: DateTime
  link: String
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  readAt_ASC
  readAt_DESC
  link_ASC
  link_DESC
}

type NotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
  readAt: DateTime
  link: String
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateInput {
  deletedAt: DateTime
  note: String
  title: String
  content: String
  readAt: DateTime
  link: String
  user: UserUpdateOneRequiredWithoutNotificationsInput
}

input NotificationUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  title: String
  content: String
  readAt: DateTime
  link: String
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  delete: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateWithoutUserDataInput {
  deletedAt: DateTime
  note: String
  title: String
  content: String
  readAt: DateTime
  link: String
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserDataInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  readAt: DateTime

  """All values that are not equal to given value."""
  readAt_not: DateTime

  """All values that are contained in given list."""
  readAt_in: [DateTime!]

  """All values that are not contained in given list."""
  readAt_not_in: [DateTime!]

  """All values less than the given value."""
  readAt_lt: DateTime

  """All values less than or equal the given value."""
  readAt_lte: DateTime

  """All values greater than the given value."""
  readAt_gt: DateTime

  """All values greater than or equal the given value."""
  readAt_gte: DateTime
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  user: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

type Order implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  store: Store!
  trackAndTraceCode: String
  status: OrderStatus!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdBy: User
  orderedAt: DateTime
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  address: Address
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus!
  orderedAt: DateTime
  store: StoreCreateOneWithoutOrdersInput!
  comments: CommentCreateManyWithoutOrderInput
  createdBy: UserCreateOneWithoutOrdersInput
  items: OrderItemCreateManyInput
  address: AddressCreateOneInput
}

input OrderCreateManyWithoutCreatedByInput {
  create: [OrderCreateWithoutCreatedByInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutStoreInput {
  create: [OrderCreateWithoutStoreInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutCommentsInput {
  create: OrderCreateWithoutCommentsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCommentsInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus!
  orderedAt: DateTime
  store: StoreCreateOneWithoutOrdersInput!
  createdBy: UserCreateOneWithoutOrdersInput
  items: OrderItemCreateManyInput
  address: AddressCreateOneInput
}

input OrderCreateWithoutCreatedByInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus!
  orderedAt: DateTime
  store: StoreCreateOneWithoutOrdersInput!
  comments: CommentCreateManyWithoutOrderInput
  items: OrderItemCreateManyInput
  address: AddressCreateOneInput
}

input OrderCreateWithoutStoreInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus!
  orderedAt: DateTime
  comments: CommentCreateManyWithoutOrderInput
  createdBy: UserCreateOneWithoutOrdersInput
  items: OrderItemCreateManyInput
  address: AddressCreateOneInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String
  amount: Int
  price: Int
  currency: String
  orderTemplate: OrderTemplate
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  product: Product
}

"""A connection to a list of items."""
type OrderItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  deletedAt: DateTime
  note: String
  name: String
  amount: Int
  price: Int
  currency: String
  orderTemplate: OrderTemplateCreateOneInput
  items: OrderItemCreateManyInput
  product: ProductCreateOneInput
}

input OrderItemCreateManyInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

"""An edge in a connection."""
type OrderItemEdge {
  """The item at the end of the edge."""
  node: OrderItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  price_ASC
  price_DESC
  currency_ASC
  currency_DESC
}

type OrderItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String
  amount: Int
  price: Int
  currency: String
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
}

input OrderItemUpdateDataInput {
  deletedAt: DateTime
  note: String
  name: String
  amount: Int
  price: Int
  currency: String
  orderTemplate: OrderTemplateUpdateOneInput
  items: OrderItemUpdateManyInput
  product: ProductUpdateOneInput
}

input OrderItemUpdateInput {
  deletedAt: DateTime
  note: String
  name: String
  amount: Int
  price: Int
  currency: String
  orderTemplate: OrderTemplateUpdateOneInput
  items: OrderItemUpdateManyInput
  product: ProductUpdateOneInput
}

input OrderItemUpdateManyInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  delete: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueNestedInput!]
}

input OrderItemUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  name: String
  amount: Int
  price: Int
  currency: String
}

input OrderItemUpdateWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateDataInput!
}

input OrderItemUpsertWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateDataInput!
  create: OrderItemCreateInput!
}

input OrderItemWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  orderTemplate: OrderTemplateWhereInput
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  product: ProductWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  orderNumber_ASC
  orderNumber_DESC
  poNumber_ASC
  poNumber_DESC
  trackAndTraceCode_ASC
  trackAndTraceCode_DESC
  status_ASC
  status_DESC
  orderedAt_ASC
  orderedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus!
  orderedAt: DateTime
}

enum OrderStatus {
  WAITING_FOR_APPROVAL
  PENDING
  RECEIVED
  DISPATCHED
  DELIVERED
  INSTALLED
  CANCELLED
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

type OrderTemplate implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: Properties
  filterOptions: FilterOptions
  brand: Brand!
  parent: OrderTemplate
  children(where: OrderTemplateWhereInput, orderBy: OrderTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderTemplate!]
  product: Product
}

"""A connection to a list of items."""
type OrderTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderTemplateEdge]!
  aggregate: AggregateOrderTemplate!
}

input OrderTemplateCreateInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesCreateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsCreateOneInput
  brand: BrandCreateOneWithoutOrderTemplatesInput!
  parent: OrderTemplateCreateOneWithoutChildrenInput
  children: OrderTemplateCreateManyWithoutParentInput
  product: ProductCreateOneInput
}

input OrderTemplateCreateManyWithoutBrandInput {
  create: [OrderTemplateCreateWithoutBrandInput!]
  connect: [OrderTemplateWhereUniqueInput!]
}

input OrderTemplateCreateManyWithoutParentInput {
  create: [OrderTemplateCreateWithoutParentInput!]
  connect: [OrderTemplateWhereUniqueInput!]
}

input OrderTemplateCreateOneInput {
  create: OrderTemplateCreateInput
  connect: OrderTemplateWhereUniqueInput
}

input OrderTemplateCreateOneWithoutChildrenInput {
  create: OrderTemplateCreateWithoutChildrenInput
  connect: OrderTemplateWhereUniqueInput
}

input OrderTemplateCreateOneWithoutPropertiesInput {
  create: OrderTemplateCreateWithoutPropertiesInput
  connect: OrderTemplateWhereUniqueInput
}

input OrderTemplateCreateWithoutBrandInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesCreateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsCreateOneInput
  parent: OrderTemplateCreateOneWithoutChildrenInput
  children: OrderTemplateCreateManyWithoutParentInput
  product: ProductCreateOneInput
}

input OrderTemplateCreateWithoutChildrenInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesCreateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsCreateOneInput
  brand: BrandCreateOneWithoutOrderTemplatesInput!
  parent: OrderTemplateCreateOneWithoutChildrenInput
  product: ProductCreateOneInput
}

input OrderTemplateCreateWithoutParentInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesCreateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsCreateOneInput
  brand: BrandCreateOneWithoutOrderTemplatesInput!
  children: OrderTemplateCreateManyWithoutParentInput
  product: ProductCreateOneInput
}

input OrderTemplateCreateWithoutPropertiesInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  filterOptions: FilterOptionsCreateOneInput
  brand: BrandCreateOneWithoutOrderTemplatesInput!
  parent: OrderTemplateCreateOneWithoutChildrenInput
  children: OrderTemplateCreateManyWithoutParentInput
  product: ProductCreateOneInput
}

"""An edge in a connection."""
type OrderTemplateEdge {
  """The item at the end of the edge."""
  node: OrderTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderTemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  sortIndex_ASC
  sortIndex_DESC
  defaultOrderAmount_ASC
  defaultOrderAmount_DESC
  minOrderAmount_ASC
  minOrderAmount_DESC
  maxOrderAmount_ASC
  maxOrderAmount_DESC
  orderable_ASC
  orderable_DESC
  stock_ASC
  stock_DESC
  stockWarning_ASC
  stockWarning_DESC
  visibleFrom_ASC
  visibleFrom_DESC
  visibleUntil_ASC
  visibleUntil_DESC
}

type OrderTemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
}

type OrderTemplateSubscriptionPayload {
  mutation: MutationType!
  node: OrderTemplate
  updatedFields: [String!]
  previousValues: OrderTemplatePreviousValues
}

input OrderTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderTemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderTemplateWhereInput
}

input OrderTemplateUpdateDataInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesUpdateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsUpdateOneInput
  brand: BrandUpdateOneRequiredWithoutOrderTemplatesInput
  parent: OrderTemplateUpdateOneWithoutChildrenInput
  children: OrderTemplateUpdateManyWithoutParentInput
  product: ProductUpdateOneInput
}

input OrderTemplateUpdateInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesUpdateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsUpdateOneInput
  brand: BrandUpdateOneRequiredWithoutOrderTemplatesInput
  parent: OrderTemplateUpdateOneWithoutChildrenInput
  children: OrderTemplateUpdateManyWithoutParentInput
  product: ProductUpdateOneInput
}

input OrderTemplateUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
}

input OrderTemplateUpdateManyWithoutBrandInput {
  create: [OrderTemplateCreateWithoutBrandInput!]
  connect: [OrderTemplateWhereUniqueInput!]
  disconnect: [OrderTemplateWhereUniqueInput!]
  delete: [OrderTemplateWhereUniqueInput!]
  update: [OrderTemplateUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [OrderTemplateUpsertWithWhereUniqueWithoutBrandInput!]
}

input OrderTemplateUpdateManyWithoutParentInput {
  create: [OrderTemplateCreateWithoutParentInput!]
  connect: [OrderTemplateWhereUniqueInput!]
  disconnect: [OrderTemplateWhereUniqueInput!]
  delete: [OrderTemplateWhereUniqueInput!]
  update: [OrderTemplateUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [OrderTemplateUpsertWithWhereUniqueWithoutParentInput!]
}

input OrderTemplateUpdateOneInput {
  create: OrderTemplateCreateInput
  connect: OrderTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderTemplateUpdateDataInput
  upsert: OrderTemplateUpsertNestedInput
}

input OrderTemplateUpdateOneWithoutChildrenInput {
  create: OrderTemplateCreateWithoutChildrenInput
  connect: OrderTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderTemplateUpdateWithoutChildrenDataInput
  upsert: OrderTemplateUpsertWithoutChildrenInput
}

input OrderTemplateUpdateOneWithoutPropertiesInput {
  create: OrderTemplateCreateWithoutPropertiesInput
  connect: OrderTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderTemplateUpdateWithoutPropertiesDataInput
  upsert: OrderTemplateUpsertWithoutPropertiesInput
}

input OrderTemplateUpdateWithoutBrandDataInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesUpdateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsUpdateOneInput
  parent: OrderTemplateUpdateOneWithoutChildrenInput
  children: OrderTemplateUpdateManyWithoutParentInput
  product: ProductUpdateOneInput
}

input OrderTemplateUpdateWithoutChildrenDataInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesUpdateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsUpdateOneInput
  brand: BrandUpdateOneRequiredWithoutOrderTemplatesInput
  parent: OrderTemplateUpdateOneWithoutChildrenInput
  product: ProductUpdateOneInput
}

input OrderTemplateUpdateWithoutParentDataInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  properties: PropertiesUpdateOneWithoutOrderTemplateInput
  filterOptions: FilterOptionsUpdateOneInput
  brand: BrandUpdateOneRequiredWithoutOrderTemplatesInput
  children: OrderTemplateUpdateManyWithoutParentInput
  product: ProductUpdateOneInput
}

input OrderTemplateUpdateWithoutPropertiesDataInput {
  deletedAt: DateTime
  note: String
  sortIndex: Int
  defaultOrderAmount: Int
  minOrderAmount: Int
  maxOrderAmount: Int
  orderable: Boolean
  stock: Int
  stockWarning: Int
  visibleFrom: DateTime
  visibleUntil: DateTime
  filterOptions: FilterOptionsUpdateOneInput
  brand: BrandUpdateOneRequiredWithoutOrderTemplatesInput
  parent: OrderTemplateUpdateOneWithoutChildrenInput
  children: OrderTemplateUpdateManyWithoutParentInput
  product: ProductUpdateOneInput
}

input OrderTemplateUpdateWithWhereUniqueWithoutBrandInput {
  where: OrderTemplateWhereUniqueInput!
  data: OrderTemplateUpdateWithoutBrandDataInput!
}

input OrderTemplateUpdateWithWhereUniqueWithoutParentInput {
  where: OrderTemplateWhereUniqueInput!
  data: OrderTemplateUpdateWithoutParentDataInput!
}

input OrderTemplateUpsertNestedInput {
  update: OrderTemplateUpdateDataInput!
  create: OrderTemplateCreateInput!
}

input OrderTemplateUpsertWithoutChildrenInput {
  update: OrderTemplateUpdateWithoutChildrenDataInput!
  create: OrderTemplateCreateWithoutChildrenInput!
}

input OrderTemplateUpsertWithoutPropertiesInput {
  update: OrderTemplateUpdateWithoutPropertiesDataInput!
  create: OrderTemplateCreateWithoutPropertiesInput!
}

input OrderTemplateUpsertWithWhereUniqueWithoutBrandInput {
  where: OrderTemplateWhereUniqueInput!
  update: OrderTemplateUpdateWithoutBrandDataInput!
  create: OrderTemplateCreateWithoutBrandInput!
}

input OrderTemplateUpsertWithWhereUniqueWithoutParentInput {
  where: OrderTemplateWhereUniqueInput!
  update: OrderTemplateUpdateWithoutParentDataInput!
  create: OrderTemplateCreateWithoutParentInput!
}

input OrderTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  sortIndex: Int

  """All values that are not equal to given value."""
  sortIndex_not: Int

  """All values that are contained in given list."""
  sortIndex_in: [Int!]

  """All values that are not contained in given list."""
  sortIndex_not_in: [Int!]

  """All values less than the given value."""
  sortIndex_lt: Int

  """All values less than or equal the given value."""
  sortIndex_lte: Int

  """All values greater than the given value."""
  sortIndex_gt: Int

  """All values greater than or equal the given value."""
  sortIndex_gte: Int
  defaultOrderAmount: Int

  """All values that are not equal to given value."""
  defaultOrderAmount_not: Int

  """All values that are contained in given list."""
  defaultOrderAmount_in: [Int!]

  """All values that are not contained in given list."""
  defaultOrderAmount_not_in: [Int!]

  """All values less than the given value."""
  defaultOrderAmount_lt: Int

  """All values less than or equal the given value."""
  defaultOrderAmount_lte: Int

  """All values greater than the given value."""
  defaultOrderAmount_gt: Int

  """All values greater than or equal the given value."""
  defaultOrderAmount_gte: Int
  minOrderAmount: Int

  """All values that are not equal to given value."""
  minOrderAmount_not: Int

  """All values that are contained in given list."""
  minOrderAmount_in: [Int!]

  """All values that are not contained in given list."""
  minOrderAmount_not_in: [Int!]

  """All values less than the given value."""
  minOrderAmount_lt: Int

  """All values less than or equal the given value."""
  minOrderAmount_lte: Int

  """All values greater than the given value."""
  minOrderAmount_gt: Int

  """All values greater than or equal the given value."""
  minOrderAmount_gte: Int
  maxOrderAmount: Int

  """All values that are not equal to given value."""
  maxOrderAmount_not: Int

  """All values that are contained in given list."""
  maxOrderAmount_in: [Int!]

  """All values that are not contained in given list."""
  maxOrderAmount_not_in: [Int!]

  """All values less than the given value."""
  maxOrderAmount_lt: Int

  """All values less than or equal the given value."""
  maxOrderAmount_lte: Int

  """All values greater than the given value."""
  maxOrderAmount_gt: Int

  """All values greater than or equal the given value."""
  maxOrderAmount_gte: Int
  orderable: Boolean

  """All values that are not equal to given value."""
  orderable_not: Boolean
  stock: Int

  """All values that are not equal to given value."""
  stock_not: Int

  """All values that are contained in given list."""
  stock_in: [Int!]

  """All values that are not contained in given list."""
  stock_not_in: [Int!]

  """All values less than the given value."""
  stock_lt: Int

  """All values less than or equal the given value."""
  stock_lte: Int

  """All values greater than the given value."""
  stock_gt: Int

  """All values greater than or equal the given value."""
  stock_gte: Int
  stockWarning: Int

  """All values that are not equal to given value."""
  stockWarning_not: Int

  """All values that are contained in given list."""
  stockWarning_in: [Int!]

  """All values that are not contained in given list."""
  stockWarning_not_in: [Int!]

  """All values less than the given value."""
  stockWarning_lt: Int

  """All values less than or equal the given value."""
  stockWarning_lte: Int

  """All values greater than the given value."""
  stockWarning_gt: Int

  """All values greater than or equal the given value."""
  stockWarning_gte: Int
  visibleFrom: DateTime

  """All values that are not equal to given value."""
  visibleFrom_not: DateTime

  """All values that are contained in given list."""
  visibleFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  visibleFrom_not_in: [DateTime!]

  """All values less than the given value."""
  visibleFrom_lt: DateTime

  """All values less than or equal the given value."""
  visibleFrom_lte: DateTime

  """All values greater than the given value."""
  visibleFrom_gt: DateTime

  """All values greater than or equal the given value."""
  visibleFrom_gte: DateTime
  visibleUntil: DateTime

  """All values that are not equal to given value."""
  visibleUntil_not: DateTime

  """All values that are contained in given list."""
  visibleUntil_in: [DateTime!]

  """All values that are not contained in given list."""
  visibleUntil_not_in: [DateTime!]

  """All values less than the given value."""
  visibleUntil_lt: DateTime

  """All values less than or equal the given value."""
  visibleUntil_lte: DateTime

  """All values greater than the given value."""
  visibleUntil_gt: DateTime

  """All values greater than or equal the given value."""
  visibleUntil_gte: DateTime
  properties: PropertiesWhereInput
  filterOptions: FilterOptionsWhereInput
  brand: BrandWhereInput
  parent: OrderTemplateWhereInput
  children_every: OrderTemplateWhereInput
  children_some: OrderTemplateWhereInput
  children_none: OrderTemplateWhereInput
  product: ProductWhereInput
}

input OrderTemplateWhereUniqueInput {
  id: ID
}

input OrderUpdateInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus
  orderedAt: DateTime
  store: StoreUpdateOneRequiredWithoutOrdersInput
  comments: CommentUpdateManyWithoutOrderInput
  createdBy: UserUpdateOneWithoutOrdersInput
  items: OrderItemUpdateManyInput
  address: AddressUpdateOneInput
}

input OrderUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus
  orderedAt: DateTime
}

input OrderUpdateManyWithoutCreatedByInput {
  create: [OrderCreateWithoutCreatedByInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input OrderUpdateManyWithoutStoreInput {
  create: [OrderCreateWithoutStoreInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutStoreInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutStoreInput!]
}

input OrderUpdateOneRequiredWithoutCommentsInput {
  create: OrderCreateWithoutCommentsInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateWithoutCommentsDataInput
  upsert: OrderUpsertWithoutCommentsInput
}

input OrderUpdateWithoutCommentsDataInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus
  orderedAt: DateTime
  store: StoreUpdateOneRequiredWithoutOrdersInput
  createdBy: UserUpdateOneWithoutOrdersInput
  items: OrderItemUpdateManyInput
  address: AddressUpdateOneInput
}

input OrderUpdateWithoutCreatedByDataInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus
  orderedAt: DateTime
  store: StoreUpdateOneRequiredWithoutOrdersInput
  comments: CommentUpdateManyWithoutOrderInput
  items: OrderItemUpdateManyInput
  address: AddressUpdateOneInput
}

input OrderUpdateWithoutStoreDataInput {
  deletedAt: DateTime
  note: String
  orderNumber: String
  poNumber: String
  trackAndTraceCode: String
  status: OrderStatus
  orderedAt: DateTime
  comments: CommentUpdateManyWithoutOrderInput
  createdBy: UserUpdateOneWithoutOrdersInput
  items: OrderItemUpdateManyInput
  address: AddressUpdateOneInput
}

input OrderUpdateWithWhereUniqueWithoutCreatedByInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCreatedByDataInput!
}

input OrderUpdateWithWhereUniqueWithoutStoreInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutStoreDataInput!
}

input OrderUpsertWithoutCommentsInput {
  update: OrderUpdateWithoutCommentsDataInput!
  create: OrderCreateWithoutCommentsInput!
}

input OrderUpsertWithWhereUniqueWithoutCreatedByInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCreatedByDataInput!
  create: OrderCreateWithoutCreatedByInput!
}

input OrderUpsertWithWhereUniqueWithoutStoreInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutStoreDataInput!
  create: OrderCreateWithoutStoreInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  orderNumber: String

  """All values that are not equal to given value."""
  orderNumber_not: String

  """All values that are contained in given list."""
  orderNumber_in: [String!]

  """All values that are not contained in given list."""
  orderNumber_not_in: [String!]

  """All values less than the given value."""
  orderNumber_lt: String

  """All values less than or equal the given value."""
  orderNumber_lte: String

  """All values greater than the given value."""
  orderNumber_gt: String

  """All values greater than or equal the given value."""
  orderNumber_gte: String

  """All values containing the given string."""
  orderNumber_contains: String

  """All values not containing the given string."""
  orderNumber_not_contains: String

  """All values starting with the given string."""
  orderNumber_starts_with: String

  """All values not starting with the given string."""
  orderNumber_not_starts_with: String

  """All values ending with the given string."""
  orderNumber_ends_with: String

  """All values not ending with the given string."""
  orderNumber_not_ends_with: String
  poNumber: String

  """All values that are not equal to given value."""
  poNumber_not: String

  """All values that are contained in given list."""
  poNumber_in: [String!]

  """All values that are not contained in given list."""
  poNumber_not_in: [String!]

  """All values less than the given value."""
  poNumber_lt: String

  """All values less than or equal the given value."""
  poNumber_lte: String

  """All values greater than the given value."""
  poNumber_gt: String

  """All values greater than or equal the given value."""
  poNumber_gte: String

  """All values containing the given string."""
  poNumber_contains: String

  """All values not containing the given string."""
  poNumber_not_contains: String

  """All values starting with the given string."""
  poNumber_starts_with: String

  """All values not starting with the given string."""
  poNumber_not_starts_with: String

  """All values ending with the given string."""
  poNumber_ends_with: String

  """All values not ending with the given string."""
  poNumber_not_ends_with: String
  trackAndTraceCode: String

  """All values that are not equal to given value."""
  trackAndTraceCode_not: String

  """All values that are contained in given list."""
  trackAndTraceCode_in: [String!]

  """All values that are not contained in given list."""
  trackAndTraceCode_not_in: [String!]

  """All values less than the given value."""
  trackAndTraceCode_lt: String

  """All values less than or equal the given value."""
  trackAndTraceCode_lte: String

  """All values greater than the given value."""
  trackAndTraceCode_gt: String

  """All values greater than or equal the given value."""
  trackAndTraceCode_gte: String

  """All values containing the given string."""
  trackAndTraceCode_contains: String

  """All values not containing the given string."""
  trackAndTraceCode_not_contains: String

  """All values starting with the given string."""
  trackAndTraceCode_starts_with: String

  """All values not starting with the given string."""
  trackAndTraceCode_not_starts_with: String

  """All values ending with the given string."""
  trackAndTraceCode_ends_with: String

  """All values not ending with the given string."""
  trackAndTraceCode_not_ends_with: String
  status: OrderStatus

  """All values that are not equal to given value."""
  status_not: OrderStatus

  """All values that are contained in given list."""
  status_in: [OrderStatus!]

  """All values that are not contained in given list."""
  status_not_in: [OrderStatus!]
  orderedAt: DateTime

  """All values that are not equal to given value."""
  orderedAt_not: DateTime

  """All values that are contained in given list."""
  orderedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  orderedAt_not_in: [DateTime!]

  """All values less than the given value."""
  orderedAt_lt: DateTime

  """All values less than or equal the given value."""
  orderedAt_lte: DateTime

  """All values greater than the given value."""
  orderedAt_gt: DateTime

  """All values greater than or equal the given value."""
  orderedAt_gte: DateTime
  store: StoreWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  createdBy: UserWhereInput
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  address: AddressWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PermissionAction {
  CREATE_OWN
  CREATE_ALL
  UPDATE_OWN
  UPDATE_ALL
  DELETE_OWN
  DELETE_ALL
  VIEW_OWN
  VIEW_ALL
  ALL
}

enum PermissionModel {
  USER
  PRODUCT
  ORDER
  ORDER_STATUS
  BRAND
  ROLE
  STORE
  SUPPLIER
  SUPPORT
  NOTIFICATION
  ALL
}

type Product implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  stock: Int
  brand: Brand
  properties: Properties!
  productCategories: ProductCategory
}

type ProductCategory implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  properties: Properties!
  brand: Brand
  parent: ProductCategory
  children(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductCategory!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type ProductCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductCategoryEdge]!
  aggregate: AggregateProductCategory!
}

input ProductCategoryCreateInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesCreateOneWithoutProductCategoryInput!
  brand: BrandCreateOneWithoutProductCategoriesInput
  parent: ProductCategoryCreateOneWithoutChildrenInput
  children: ProductCategoryCreateManyWithoutParentInput
  products: ProductCreateManyWithoutProductCategoriesInput
}

input ProductCategoryCreateManyWithoutBrandInput {
  create: [ProductCategoryCreateWithoutBrandInput!]
  connect: [ProductCategoryWhereUniqueInput!]
}

input ProductCategoryCreateManyWithoutParentInput {
  create: [ProductCategoryCreateWithoutParentInput!]
  connect: [ProductCategoryWhereUniqueInput!]
}

input ProductCategoryCreateOneWithoutChildrenInput {
  create: ProductCategoryCreateWithoutChildrenInput
  connect: ProductCategoryWhereUniqueInput
}

input ProductCategoryCreateOneWithoutProductsInput {
  create: ProductCategoryCreateWithoutProductsInput
  connect: ProductCategoryWhereUniqueInput
}

input ProductCategoryCreateOneWithoutPropertiesInput {
  create: ProductCategoryCreateWithoutPropertiesInput
  connect: ProductCategoryWhereUniqueInput
}

input ProductCategoryCreateWithoutBrandInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesCreateOneWithoutProductCategoryInput!
  parent: ProductCategoryCreateOneWithoutChildrenInput
  children: ProductCategoryCreateManyWithoutParentInput
  products: ProductCreateManyWithoutProductCategoriesInput
}

input ProductCategoryCreateWithoutChildrenInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesCreateOneWithoutProductCategoryInput!
  brand: BrandCreateOneWithoutProductCategoriesInput
  parent: ProductCategoryCreateOneWithoutChildrenInput
  products: ProductCreateManyWithoutProductCategoriesInput
}

input ProductCategoryCreateWithoutParentInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesCreateOneWithoutProductCategoryInput!
  brand: BrandCreateOneWithoutProductCategoriesInput
  children: ProductCategoryCreateManyWithoutParentInput
  products: ProductCreateManyWithoutProductCategoriesInput
}

input ProductCategoryCreateWithoutProductsInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesCreateOneWithoutProductCategoryInput!
  brand: BrandCreateOneWithoutProductCategoriesInput
  parent: ProductCategoryCreateOneWithoutChildrenInput
  children: ProductCategoryCreateManyWithoutParentInput
}

input ProductCategoryCreateWithoutPropertiesInput {
  deletedAt: DateTime
  note: String
  brand: BrandCreateOneWithoutProductCategoriesInput
  parent: ProductCategoryCreateOneWithoutChildrenInput
  children: ProductCategoryCreateManyWithoutParentInput
  products: ProductCreateManyWithoutProductCategoriesInput
}

"""An edge in a connection."""
type ProductCategoryEdge {
  """The item at the end of the edge."""
  node: ProductCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductCategoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
}

type ProductCategoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
}

type ProductCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProductCategory
  updatedFields: [String!]
  previousValues: ProductCategoryPreviousValues
}

input ProductCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductCategoryWhereInput
}

input ProductCategoryUpdateInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesUpdateOneRequiredWithoutProductCategoryInput
  brand: BrandUpdateOneWithoutProductCategoriesInput
  parent: ProductCategoryUpdateOneWithoutChildrenInput
  children: ProductCategoryUpdateManyWithoutParentInput
  products: ProductUpdateManyWithoutProductCategoriesInput
}

input ProductCategoryUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
}

input ProductCategoryUpdateManyWithoutBrandInput {
  create: [ProductCategoryCreateWithoutBrandInput!]
  connect: [ProductCategoryWhereUniqueInput!]
  disconnect: [ProductCategoryWhereUniqueInput!]
  delete: [ProductCategoryWhereUniqueInput!]
  update: [ProductCategoryUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [ProductCategoryUpsertWithWhereUniqueWithoutBrandInput!]
}

input ProductCategoryUpdateManyWithoutParentInput {
  create: [ProductCategoryCreateWithoutParentInput!]
  connect: [ProductCategoryWhereUniqueInput!]
  disconnect: [ProductCategoryWhereUniqueInput!]
  delete: [ProductCategoryWhereUniqueInput!]
  update: [ProductCategoryUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [ProductCategoryUpsertWithWhereUniqueWithoutParentInput!]
}

input ProductCategoryUpdateOneWithoutChildrenInput {
  create: ProductCategoryCreateWithoutChildrenInput
  connect: ProductCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductCategoryUpdateWithoutChildrenDataInput
  upsert: ProductCategoryUpsertWithoutChildrenInput
}

input ProductCategoryUpdateOneWithoutProductsInput {
  create: ProductCategoryCreateWithoutProductsInput
  connect: ProductCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductCategoryUpdateWithoutProductsDataInput
  upsert: ProductCategoryUpsertWithoutProductsInput
}

input ProductCategoryUpdateOneWithoutPropertiesInput {
  create: ProductCategoryCreateWithoutPropertiesInput
  connect: ProductCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductCategoryUpdateWithoutPropertiesDataInput
  upsert: ProductCategoryUpsertWithoutPropertiesInput
}

input ProductCategoryUpdateWithoutBrandDataInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesUpdateOneRequiredWithoutProductCategoryInput
  parent: ProductCategoryUpdateOneWithoutChildrenInput
  children: ProductCategoryUpdateManyWithoutParentInput
  products: ProductUpdateManyWithoutProductCategoriesInput
}

input ProductCategoryUpdateWithoutChildrenDataInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesUpdateOneRequiredWithoutProductCategoryInput
  brand: BrandUpdateOneWithoutProductCategoriesInput
  parent: ProductCategoryUpdateOneWithoutChildrenInput
  products: ProductUpdateManyWithoutProductCategoriesInput
}

input ProductCategoryUpdateWithoutParentDataInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesUpdateOneRequiredWithoutProductCategoryInput
  brand: BrandUpdateOneWithoutProductCategoriesInput
  children: ProductCategoryUpdateManyWithoutParentInput
  products: ProductUpdateManyWithoutProductCategoriesInput
}

input ProductCategoryUpdateWithoutProductsDataInput {
  deletedAt: DateTime
  note: String
  properties: PropertiesUpdateOneRequiredWithoutProductCategoryInput
  brand: BrandUpdateOneWithoutProductCategoriesInput
  parent: ProductCategoryUpdateOneWithoutChildrenInput
  children: ProductCategoryUpdateManyWithoutParentInput
}

input ProductCategoryUpdateWithoutPropertiesDataInput {
  deletedAt: DateTime
  note: String
  brand: BrandUpdateOneWithoutProductCategoriesInput
  parent: ProductCategoryUpdateOneWithoutChildrenInput
  children: ProductCategoryUpdateManyWithoutParentInput
  products: ProductUpdateManyWithoutProductCategoriesInput
}

input ProductCategoryUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductCategoryWhereUniqueInput!
  data: ProductCategoryUpdateWithoutBrandDataInput!
}

input ProductCategoryUpdateWithWhereUniqueWithoutParentInput {
  where: ProductCategoryWhereUniqueInput!
  data: ProductCategoryUpdateWithoutParentDataInput!
}

input ProductCategoryUpsertWithoutChildrenInput {
  update: ProductCategoryUpdateWithoutChildrenDataInput!
  create: ProductCategoryCreateWithoutChildrenInput!
}

input ProductCategoryUpsertWithoutProductsInput {
  update: ProductCategoryUpdateWithoutProductsDataInput!
  create: ProductCategoryCreateWithoutProductsInput!
}

input ProductCategoryUpsertWithoutPropertiesInput {
  update: ProductCategoryUpdateWithoutPropertiesDataInput!
  create: ProductCategoryCreateWithoutPropertiesInput!
}

input ProductCategoryUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductCategoryWhereUniqueInput!
  update: ProductCategoryUpdateWithoutBrandDataInput!
  create: ProductCategoryCreateWithoutBrandInput!
}

input ProductCategoryUpsertWithWhereUniqueWithoutParentInput {
  where: ProductCategoryWhereUniqueInput!
  update: ProductCategoryUpdateWithoutParentDataInput!
  create: ProductCategoryCreateWithoutParentInput!
}

input ProductCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  properties: PropertiesWhereInput
  brand: BrandWhereInput
  parent: ProductCategoryWhereInput
  children_every: ProductCategoryWhereInput
  children_some: ProductCategoryWhereInput
  children_none: ProductCategoryWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input ProductCategoryWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandCreateOneInput
  properties: PropertiesCreateOneWithoutProductInput!
  productCategories: ProductCategoryCreateOneWithoutProductsInput
}

input ProductCreateManyWithoutProductCategoriesInput {
  create: [ProductCreateWithoutProductCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutPropertiesInput {
  create: ProductCreateWithoutPropertiesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutProductCategoriesInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandCreateOneInput
  properties: PropertiesCreateOneWithoutProductInput!
}

input ProductCreateWithoutPropertiesInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandCreateOneInput
  productCategories: ProductCategoryCreateOneWithoutProductsInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  stock_ASC
  stock_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  stock: Int
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateDataInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandUpdateOneInput
  properties: PropertiesUpdateOneRequiredWithoutProductInput
  productCategories: ProductCategoryUpdateOneWithoutProductsInput
}

input ProductUpdateInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandUpdateOneInput
  properties: PropertiesUpdateOneRequiredWithoutProductInput
  productCategories: ProductCategoryUpdateOneWithoutProductsInput
}

input ProductUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  stock: Int
}

input ProductUpdateManyWithoutProductCategoriesInput {
  create: [ProductCreateWithoutProductCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutProductCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutProductCategoriesInput!]
}

input ProductUpdateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneWithoutPropertiesInput {
  create: ProductCreateWithoutPropertiesInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutPropertiesDataInput
  upsert: ProductUpsertWithoutPropertiesInput
}

input ProductUpdateWithoutProductCategoriesDataInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandUpdateOneInput
  properties: PropertiesUpdateOneRequiredWithoutProductInput
}

input ProductUpdateWithoutPropertiesDataInput {
  deletedAt: DateTime
  note: String
  stock: Int
  brand: BrandUpdateOneInput
  productCategories: ProductCategoryUpdateOneWithoutProductsInput
}

input ProductUpdateWithWhereUniqueWithoutProductCategoriesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutProductCategoriesDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutPropertiesInput {
  update: ProductUpdateWithoutPropertiesDataInput!
  create: ProductCreateWithoutPropertiesInput!
}

input ProductUpsertWithWhereUniqueWithoutProductCategoriesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutProductCategoriesDataInput!
  create: ProductCreateWithoutProductCategoriesInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  stock: Int

  """All values that are not equal to given value."""
  stock_not: Int

  """All values that are contained in given list."""
  stock_in: [Int!]

  """All values that are not contained in given list."""
  stock_not_in: [Int!]

  """All values less than the given value."""
  stock_lt: Int

  """All values less than or equal the given value."""
  stock_lte: Int

  """All values greater than the given value."""
  stock_gt: Int

  """All values greater than or equal the given value."""
  stock_gte: Int
  brand: BrandWhereInput
  properties: PropertiesWhereInput
  productCategories: ProductCategoryWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Properties implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: Language
  images(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  supplier: Supplier
  product: Product
  productCategory: ProductCategory
  orderTemplate: OrderTemplate
}

"""A connection to a list of items."""
type PropertiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertiesEdge]!
  aggregate: AggregateProperties!
}

input PropertiesCreateInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageCreateOneInput
  images: FileCreateManyInput
  supplier: SupplierCreateOneWithoutProductsInput
  product: ProductCreateOneWithoutPropertiesInput
  productCategory: ProductCategoryCreateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateCreateOneWithoutPropertiesInput
}

input PropertiesCreateManyWithoutSupplierInput {
  create: [PropertiesCreateWithoutSupplierInput!]
  connect: [PropertiesWhereUniqueInput!]
}

input PropertiesCreateOneWithoutOrderTemplateInput {
  create: PropertiesCreateWithoutOrderTemplateInput
  connect: PropertiesWhereUniqueInput
}

input PropertiesCreateOneWithoutProductCategoryInput {
  create: PropertiesCreateWithoutProductCategoryInput
  connect: PropertiesWhereUniqueInput
}

input PropertiesCreateOneWithoutProductInput {
  create: PropertiesCreateWithoutProductInput
  connect: PropertiesWhereUniqueInput
}

input PropertiesCreateWithoutOrderTemplateInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageCreateOneInput
  images: FileCreateManyInput
  supplier: SupplierCreateOneWithoutProductsInput
  product: ProductCreateOneWithoutPropertiesInput
  productCategory: ProductCategoryCreateOneWithoutPropertiesInput
}

input PropertiesCreateWithoutProductCategoryInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageCreateOneInput
  images: FileCreateManyInput
  supplier: SupplierCreateOneWithoutProductsInput
  product: ProductCreateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateCreateOneWithoutPropertiesInput
}

input PropertiesCreateWithoutProductInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageCreateOneInput
  images: FileCreateManyInput
  supplier: SupplierCreateOneWithoutProductsInput
  productCategory: ProductCategoryCreateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateCreateOneWithoutPropertiesInput
}

input PropertiesCreateWithoutSupplierInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageCreateOneInput
  images: FileCreateManyInput
  product: ProductCreateOneWithoutPropertiesInput
  productCategory: ProductCategoryCreateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateCreateOneWithoutPropertiesInput
}

"""An edge in a connection."""
type PropertiesEdge {
  """The item at the end of the edge."""
  node: Properties!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PropertiesOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  articleNumber_ASC
  articleNumber_DESC
  price_ASC
  price_DESC
  currency_ASC
  currency_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  weightG_ASC
  weightG_DESC
  widthMm_ASC
  widthMm_DESC
  heightMm_ASC
  heightMm_DESC
  depthMm_ASC
  depthMm_DESC
  color_ASC
  color_DESC
  material_ASC
  material_DESC
  size_ASC
  size_DESC
}

type PropertiesPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
}

type PropertiesSubscriptionPayload {
  mutation: MutationType!
  node: Properties
  updatedFields: [String!]
  previousValues: PropertiesPreviousValues
}

input PropertiesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertiesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertiesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertiesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertiesWhereInput
}

input PropertiesUpdateInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageUpdateOneInput
  images: FileUpdateManyInput
  supplier: SupplierUpdateOneWithoutProductsInput
  product: ProductUpdateOneWithoutPropertiesInput
  productCategory: ProductCategoryUpdateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateUpdateOneWithoutPropertiesInput
}

input PropertiesUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
}

input PropertiesUpdateManyWithoutSupplierInput {
  create: [PropertiesCreateWithoutSupplierInput!]
  connect: [PropertiesWhereUniqueInput!]
  disconnect: [PropertiesWhereUniqueInput!]
  delete: [PropertiesWhereUniqueInput!]
  update: [PropertiesUpdateWithWhereUniqueWithoutSupplierInput!]
  upsert: [PropertiesUpsertWithWhereUniqueWithoutSupplierInput!]
}

input PropertiesUpdateOneRequiredWithoutProductCategoryInput {
  create: PropertiesCreateWithoutProductCategoryInput
  connect: PropertiesWhereUniqueInput
  update: PropertiesUpdateWithoutProductCategoryDataInput
  upsert: PropertiesUpsertWithoutProductCategoryInput
}

input PropertiesUpdateOneRequiredWithoutProductInput {
  create: PropertiesCreateWithoutProductInput
  connect: PropertiesWhereUniqueInput
  update: PropertiesUpdateWithoutProductDataInput
  upsert: PropertiesUpsertWithoutProductInput
}

input PropertiesUpdateOneWithoutOrderTemplateInput {
  create: PropertiesCreateWithoutOrderTemplateInput
  connect: PropertiesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertiesUpdateWithoutOrderTemplateDataInput
  upsert: PropertiesUpsertWithoutOrderTemplateInput
}

input PropertiesUpdateWithoutOrderTemplateDataInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageUpdateOneInput
  images: FileUpdateManyInput
  supplier: SupplierUpdateOneWithoutProductsInput
  product: ProductUpdateOneWithoutPropertiesInput
  productCategory: ProductCategoryUpdateOneWithoutPropertiesInput
}

input PropertiesUpdateWithoutProductCategoryDataInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageUpdateOneInput
  images: FileUpdateManyInput
  supplier: SupplierUpdateOneWithoutProductsInput
  product: ProductUpdateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateUpdateOneWithoutPropertiesInput
}

input PropertiesUpdateWithoutProductDataInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageUpdateOneInput
  images: FileUpdateManyInput
  supplier: SupplierUpdateOneWithoutProductsInput
  productCategory: ProductCategoryUpdateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateUpdateOneWithoutPropertiesInput
}

input PropertiesUpdateWithoutSupplierDataInput {
  deletedAt: DateTime
  note: String
  articleNumber: String
  price: Int
  currency: String
  name: String
  description: String
  weightG: Int
  widthMm: Int
  heightMm: Int
  depthMm: Int
  color: String
  material: String
  size: String
  language: LanguageUpdateOneInput
  images: FileUpdateManyInput
  product: ProductUpdateOneWithoutPropertiesInput
  productCategory: ProductCategoryUpdateOneWithoutPropertiesInput
  orderTemplate: OrderTemplateUpdateOneWithoutPropertiesInput
}

input PropertiesUpdateWithWhereUniqueWithoutSupplierInput {
  where: PropertiesWhereUniqueInput!
  data: PropertiesUpdateWithoutSupplierDataInput!
}

input PropertiesUpsertWithoutOrderTemplateInput {
  update: PropertiesUpdateWithoutOrderTemplateDataInput!
  create: PropertiesCreateWithoutOrderTemplateInput!
}

input PropertiesUpsertWithoutProductCategoryInput {
  update: PropertiesUpdateWithoutProductCategoryDataInput!
  create: PropertiesCreateWithoutProductCategoryInput!
}

input PropertiesUpsertWithoutProductInput {
  update: PropertiesUpdateWithoutProductDataInput!
  create: PropertiesCreateWithoutProductInput!
}

input PropertiesUpsertWithWhereUniqueWithoutSupplierInput {
  where: PropertiesWhereUniqueInput!
  update: PropertiesUpdateWithoutSupplierDataInput!
  create: PropertiesCreateWithoutSupplierInput!
}

input PropertiesWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertiesWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertiesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertiesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  articleNumber: String

  """All values that are not equal to given value."""
  articleNumber_not: String

  """All values that are contained in given list."""
  articleNumber_in: [String!]

  """All values that are not contained in given list."""
  articleNumber_not_in: [String!]

  """All values less than the given value."""
  articleNumber_lt: String

  """All values less than or equal the given value."""
  articleNumber_lte: String

  """All values greater than the given value."""
  articleNumber_gt: String

  """All values greater than or equal the given value."""
  articleNumber_gte: String

  """All values containing the given string."""
  articleNumber_contains: String

  """All values not containing the given string."""
  articleNumber_not_contains: String

  """All values starting with the given string."""
  articleNumber_starts_with: String

  """All values not starting with the given string."""
  articleNumber_not_starts_with: String

  """All values ending with the given string."""
  articleNumber_ends_with: String

  """All values not ending with the given string."""
  articleNumber_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  weightG: Int

  """All values that are not equal to given value."""
  weightG_not: Int

  """All values that are contained in given list."""
  weightG_in: [Int!]

  """All values that are not contained in given list."""
  weightG_not_in: [Int!]

  """All values less than the given value."""
  weightG_lt: Int

  """All values less than or equal the given value."""
  weightG_lte: Int

  """All values greater than the given value."""
  weightG_gt: Int

  """All values greater than or equal the given value."""
  weightG_gte: Int
  widthMm: Int

  """All values that are not equal to given value."""
  widthMm_not: Int

  """All values that are contained in given list."""
  widthMm_in: [Int!]

  """All values that are not contained in given list."""
  widthMm_not_in: [Int!]

  """All values less than the given value."""
  widthMm_lt: Int

  """All values less than or equal the given value."""
  widthMm_lte: Int

  """All values greater than the given value."""
  widthMm_gt: Int

  """All values greater than or equal the given value."""
  widthMm_gte: Int
  heightMm: Int

  """All values that are not equal to given value."""
  heightMm_not: Int

  """All values that are contained in given list."""
  heightMm_in: [Int!]

  """All values that are not contained in given list."""
  heightMm_not_in: [Int!]

  """All values less than the given value."""
  heightMm_lt: Int

  """All values less than or equal the given value."""
  heightMm_lte: Int

  """All values greater than the given value."""
  heightMm_gt: Int

  """All values greater than or equal the given value."""
  heightMm_gte: Int
  depthMm: Int

  """All values that are not equal to given value."""
  depthMm_not: Int

  """All values that are contained in given list."""
  depthMm_in: [Int!]

  """All values that are not contained in given list."""
  depthMm_not_in: [Int!]

  """All values less than the given value."""
  depthMm_lt: Int

  """All values less than or equal the given value."""
  depthMm_lte: Int

  """All values greater than the given value."""
  depthMm_gt: Int

  """All values greater than or equal the given value."""
  depthMm_gte: Int
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  material: String

  """All values that are not equal to given value."""
  material_not: String

  """All values that are contained in given list."""
  material_in: [String!]

  """All values that are not contained in given list."""
  material_not_in: [String!]

  """All values less than the given value."""
  material_lt: String

  """All values less than or equal the given value."""
  material_lte: String

  """All values greater than the given value."""
  material_gt: String

  """All values greater than or equal the given value."""
  material_gte: String

  """All values containing the given string."""
  material_contains: String

  """All values not containing the given string."""
  material_not_contains: String

  """All values starting with the given string."""
  material_starts_with: String

  """All values not starting with the given string."""
  material_not_starts_with: String

  """All values ending with the given string."""
  material_ends_with: String

  """All values not ending with the given string."""
  material_not_ends_with: String
  size: String

  """All values that are not equal to given value."""
  size_not: String

  """All values that are contained in given list."""
  size_in: [String!]

  """All values that are not contained in given list."""
  size_not_in: [String!]

  """All values less than the given value."""
  size_lt: String

  """All values less than or equal the given value."""
  size_lte: String

  """All values greater than the given value."""
  size_gt: String

  """All values greater than or equal the given value."""
  size_gte: String

  """All values containing the given string."""
  size_contains: String

  """All values not containing the given string."""
  size_not_contains: String

  """All values starting with the given string."""
  size_starts_with: String

  """All values not starting with the given string."""
  size_not_starts_with: String

  """All values ending with the given string."""
  size_ends_with: String

  """All values not ending with the given string."""
  size_not_ends_with: String
  language: LanguageWhereInput
  images_every: FileWhereInput
  images_some: FileWhereInput
  images_none: FileWhereInput
  supplier: SupplierWhereInput
  product: ProductWhereInput
  productCategory: ProductCategoryWhereInput
  orderTemplate: OrderTemplateWhereInput
}

input PropertiesWhereUniqueInput {
  id: ID
}

type Query {
  stores(where: StoreWhereInput, orderBy: StoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Store]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  productCategories(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductCategory]!
  propertieses(where: PropertiesWhereInput, orderBy: PropertiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Properties]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
  supportPages(where: SupportPageWhereInput, orderBy: SupportPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SupportPage]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  orderTemplates(where: OrderTemplateWhereInput, orderBy: OrderTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderTemplate]!
  filterOptionses(where: FilterOptionsWhereInput, orderBy: FilterOptionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterOptions]!
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!
  rolePermissions(where: RolePermissionWhereInput, orderBy: RolePermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RolePermission]!
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  store(where: StoreWhereUniqueInput!): Store
  role(where: RoleWhereUniqueInput!): Role
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  properties(where: PropertiesWhereUniqueInput!): Properties
  order(where: OrderWhereUniqueInput!): Order
  comment(where: CommentWhereUniqueInput!): Comment
  supplier(where: SupplierWhereUniqueInput!): Supplier
  supportPage(where: SupportPageWhereUniqueInput!): SupportPage
  notification(where: NotificationWhereUniqueInput!): Notification
  user(where: UserWhereUniqueInput!): User
  orderTemplate(where: OrderTemplateWhereUniqueInput!): OrderTemplate
  filterOptions(where: FilterOptionsWhereUniqueInput!): FilterOptions
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  rolePermission(where: RolePermissionWhereUniqueInput!): RolePermission
  brand(where: BrandWhereUniqueInput!): Brand
  file(where: FileWhereUniqueInput!): File
  product(where: ProductWhereUniqueInput!): Product
  language(where: LanguageWhereUniqueInput!): Language
  address(where: AddressWhereUniqueInput!): Address
  storesConnection(where: StoreWhereInput, orderBy: StoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoreConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  productCategoriesConnection(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductCategoryConnection!
  propertiesesConnection(where: PropertiesWhereInput, orderBy: PropertiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertiesConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  suppliersConnection(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupplierConnection!
  supportPagesConnection(where: SupportPageWhereInput, orderBy: SupportPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupportPageConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  orderTemplatesConnection(where: OrderTemplateWhereInput, orderBy: OrderTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderTemplateConnection!
  filterOptionsesConnection(where: FilterOptionsWhereInput, orderBy: FilterOptionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterOptionsConnection!
  orderItemsConnection(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemConnection!
  rolePermissionsConnection(where: RolePermissionWhereInput, orderBy: RolePermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RolePermissionConnection!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String!
  description: String
  permissions(where: RolePermissionWhereInput, orderBy: RolePermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RolePermission!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  deletedAt: DateTime
  note: String
  name: String!
  description: String
  permissions: RolePermissionCreateManyInput
  users: UserCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutUsersInput {
  create: RoleCreateWithoutUsersInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutUsersInput {
  deletedAt: DateTime
  note: String
  name: String!
  description: String
  permissions: RolePermissionCreateManyInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type RolePermission implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  action: PermissionAction!
  model: PermissionModel!
}

"""A connection to a list of items."""
type RolePermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RolePermissionEdge]!
  aggregate: AggregateRolePermission!
}

input RolePermissionCreateInput {
  deletedAt: DateTime
  note: String
  action: PermissionAction!
  model: PermissionModel!
}

input RolePermissionCreateManyInput {
  create: [RolePermissionCreateInput!]
  connect: [RolePermissionWhereUniqueInput!]
}

"""An edge in a connection."""
type RolePermissionEdge {
  """The item at the end of the edge."""
  node: RolePermission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RolePermissionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  action_ASC
  action_DESC
  model_ASC
  model_DESC
}

type RolePermissionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  action: PermissionAction!
  model: PermissionModel!
}

type RolePermissionSubscriptionPayload {
  mutation: MutationType!
  node: RolePermission
  updatedFields: [String!]
  previousValues: RolePermissionPreviousValues
}

input RolePermissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RolePermissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RolePermissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RolePermissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RolePermissionWhereInput
}

input RolePermissionUpdateDataInput {
  deletedAt: DateTime
  note: String
  action: PermissionAction
  model: PermissionModel
}

input RolePermissionUpdateInput {
  deletedAt: DateTime
  note: String
  action: PermissionAction
  model: PermissionModel
}

input RolePermissionUpdateManyInput {
  create: [RolePermissionCreateInput!]
  connect: [RolePermissionWhereUniqueInput!]
  disconnect: [RolePermissionWhereUniqueInput!]
  delete: [RolePermissionWhereUniqueInput!]
  update: [RolePermissionUpdateWithWhereUniqueNestedInput!]
  upsert: [RolePermissionUpsertWithWhereUniqueNestedInput!]
}

input RolePermissionUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  action: PermissionAction
  model: PermissionModel
}

input RolePermissionUpdateWithWhereUniqueNestedInput {
  where: RolePermissionWhereUniqueInput!
  data: RolePermissionUpdateDataInput!
}

input RolePermissionUpsertWithWhereUniqueNestedInput {
  where: RolePermissionWhereUniqueInput!
  update: RolePermissionUpdateDataInput!
  create: RolePermissionCreateInput!
}

input RolePermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [RolePermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RolePermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RolePermissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  action: PermissionAction

  """All values that are not equal to given value."""
  action_not: PermissionAction

  """All values that are contained in given list."""
  action_in: [PermissionAction!]

  """All values that are not contained in given list."""
  action_not_in: [PermissionAction!]
  model: PermissionModel

  """All values that are not equal to given value."""
  model_not: PermissionModel

  """All values that are contained in given list."""
  model_in: [PermissionModel!]

  """All values that are not contained in given list."""
  model_not_in: [PermissionModel!]
}

input RolePermissionWhereUniqueInput {
  id: ID
}

type RolePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String!
  description: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  deletedAt: DateTime
  note: String
  name: String
  description: String
  permissions: RolePermissionUpdateManyInput
  users: UserUpdateManyWithoutRoleInput
}

input RoleUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  name: String
  description: String
}

input RoleUpdateOneRequiredWithoutUsersInput {
  create: RoleCreateWithoutUsersInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutUsersDataInput
  upsert: RoleUpsertWithoutUsersInput
}

input RoleUpdateWithoutUsersDataInput {
  deletedAt: DateTime
  note: String
  name: String
  description: String
  permissions: RolePermissionUpdateManyInput
}

input RoleUpsertWithoutUsersInput {
  update: RoleUpdateWithoutUsersDataInput!
  create: RoleCreateWithoutUsersInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  permissions_every: RolePermissionWhereInput
  permissions_some: RolePermissionWhereInput
  permissions_none: RolePermissionWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Store implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String!
  storeNumber: String
  address: Address
  deliveryAddress: Address
  brand: Brand
  image: File
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  language: Language
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type StoreConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StoreEdge]!
  aggregate: AggregateStore!
}

input StoreCreateInput {
  deletedAt: DateTime
  note: String
  name: String!
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressCreateOneInput
  deliveryAddress: AddressCreateOneInput
  brand: BrandCreateOneWithoutStoresInput
  image: FileCreateOneInput
  language: LanguageCreateOneInput
  orders: OrderCreateManyWithoutStoreInput
  files: FileCreateManyInput
  users: UserCreateManyWithoutStoresInput
}

input StoreCreateManyWithoutBrandInput {
  create: [StoreCreateWithoutBrandInput!]
  connect: [StoreWhereUniqueInput!]
}

input StoreCreateManyWithoutUsersInput {
  create: [StoreCreateWithoutUsersInput!]
  connect: [StoreWhereUniqueInput!]
}

input StoreCreateOneWithoutOrdersInput {
  create: StoreCreateWithoutOrdersInput
  connect: StoreWhereUniqueInput
}

input StoreCreateWithoutBrandInput {
  deletedAt: DateTime
  note: String
  name: String!
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressCreateOneInput
  deliveryAddress: AddressCreateOneInput
  image: FileCreateOneInput
  language: LanguageCreateOneInput
  orders: OrderCreateManyWithoutStoreInput
  files: FileCreateManyInput
  users: UserCreateManyWithoutStoresInput
}

input StoreCreateWithoutOrdersInput {
  deletedAt: DateTime
  note: String
  name: String!
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressCreateOneInput
  deliveryAddress: AddressCreateOneInput
  brand: BrandCreateOneWithoutStoresInput
  image: FileCreateOneInput
  language: LanguageCreateOneInput
  files: FileCreateManyInput
  users: UserCreateManyWithoutStoresInput
}

input StoreCreateWithoutUsersInput {
  deletedAt: DateTime
  note: String
  name: String!
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressCreateOneInput
  deliveryAddress: AddressCreateOneInput
  brand: BrandCreateOneWithoutStoresInput
  image: FileCreateOneInput
  language: LanguageCreateOneInput
  orders: OrderCreateManyWithoutStoreInput
  files: FileCreateManyInput
}

"""An edge in a connection."""
type StoreEdge {
  """The item at the end of the edge."""
  node: Store!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StoreOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  name_ASC
  name_DESC
  storeNumber_ASC
  storeNumber_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  website_ASC
  website_DESC
  contactPerson_ASC
  contactPerson_DESC
  contactEmail_ASC
  contactEmail_DESC
  currency_ASC
  currency_DESC
  size_ASC
  size_DESC
  type_ASC
  type_DESC
}

type StorePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String!
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
}

type StoreSubscriptionPayload {
  mutation: MutationType!
  node: Store
  updatedFields: [String!]
  previousValues: StorePreviousValues
}

input StoreSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StoreSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoreSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoreSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoreWhereInput
}

input StoreUpdateInput {
  deletedAt: DateTime
  note: String
  name: String
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressUpdateOneInput
  deliveryAddress: AddressUpdateOneInput
  brand: BrandUpdateOneWithoutStoresInput
  image: FileUpdateOneInput
  language: LanguageUpdateOneInput
  orders: OrderUpdateManyWithoutStoreInput
  files: FileUpdateManyInput
  users: UserUpdateManyWithoutStoresInput
}

input StoreUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  name: String
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
}

input StoreUpdateManyWithoutBrandInput {
  create: [StoreCreateWithoutBrandInput!]
  connect: [StoreWhereUniqueInput!]
  disconnect: [StoreWhereUniqueInput!]
  delete: [StoreWhereUniqueInput!]
  update: [StoreUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [StoreUpsertWithWhereUniqueWithoutBrandInput!]
}

input StoreUpdateManyWithoutUsersInput {
  create: [StoreCreateWithoutUsersInput!]
  connect: [StoreWhereUniqueInput!]
  disconnect: [StoreWhereUniqueInput!]
  delete: [StoreWhereUniqueInput!]
  update: [StoreUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [StoreUpsertWithWhereUniqueWithoutUsersInput!]
}

input StoreUpdateOneRequiredWithoutOrdersInput {
  create: StoreCreateWithoutOrdersInput
  connect: StoreWhereUniqueInput
  update: StoreUpdateWithoutOrdersDataInput
  upsert: StoreUpsertWithoutOrdersInput
}

input StoreUpdateWithoutBrandDataInput {
  deletedAt: DateTime
  note: String
  name: String
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressUpdateOneInput
  deliveryAddress: AddressUpdateOneInput
  image: FileUpdateOneInput
  language: LanguageUpdateOneInput
  orders: OrderUpdateManyWithoutStoreInput
  files: FileUpdateManyInput
  users: UserUpdateManyWithoutStoresInput
}

input StoreUpdateWithoutOrdersDataInput {
  deletedAt: DateTime
  note: String
  name: String
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressUpdateOneInput
  deliveryAddress: AddressUpdateOneInput
  brand: BrandUpdateOneWithoutStoresInput
  image: FileUpdateOneInput
  language: LanguageUpdateOneInput
  files: FileUpdateManyInput
  users: UserUpdateManyWithoutStoresInput
}

input StoreUpdateWithoutUsersDataInput {
  deletedAt: DateTime
  note: String
  name: String
  storeNumber: String
  email: String
  phone: String
  website: String
  contactPerson: String
  contactEmail: String
  currency: String
  size: String
  type: String
  address: AddressUpdateOneInput
  deliveryAddress: AddressUpdateOneInput
  brand: BrandUpdateOneWithoutStoresInput
  image: FileUpdateOneInput
  language: LanguageUpdateOneInput
  orders: OrderUpdateManyWithoutStoreInput
  files: FileUpdateManyInput
}

input StoreUpdateWithWhereUniqueWithoutBrandInput {
  where: StoreWhereUniqueInput!
  data: StoreUpdateWithoutBrandDataInput!
}

input StoreUpdateWithWhereUniqueWithoutUsersInput {
  where: StoreWhereUniqueInput!
  data: StoreUpdateWithoutUsersDataInput!
}

input StoreUpsertWithoutOrdersInput {
  update: StoreUpdateWithoutOrdersDataInput!
  create: StoreCreateWithoutOrdersInput!
}

input StoreUpsertWithWhereUniqueWithoutBrandInput {
  where: StoreWhereUniqueInput!
  update: StoreUpdateWithoutBrandDataInput!
  create: StoreCreateWithoutBrandInput!
}

input StoreUpsertWithWhereUniqueWithoutUsersInput {
  where: StoreWhereUniqueInput!
  update: StoreUpdateWithoutUsersDataInput!
  create: StoreCreateWithoutUsersInput!
}

input StoreWhereInput {
  """Logical AND on all given filters."""
  AND: [StoreWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoreWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoreWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  storeNumber: String

  """All values that are not equal to given value."""
  storeNumber_not: String

  """All values that are contained in given list."""
  storeNumber_in: [String!]

  """All values that are not contained in given list."""
  storeNumber_not_in: [String!]

  """All values less than the given value."""
  storeNumber_lt: String

  """All values less than or equal the given value."""
  storeNumber_lte: String

  """All values greater than the given value."""
  storeNumber_gt: String

  """All values greater than or equal the given value."""
  storeNumber_gte: String

  """All values containing the given string."""
  storeNumber_contains: String

  """All values not containing the given string."""
  storeNumber_not_contains: String

  """All values starting with the given string."""
  storeNumber_starts_with: String

  """All values not starting with the given string."""
  storeNumber_not_starts_with: String

  """All values ending with the given string."""
  storeNumber_ends_with: String

  """All values not ending with the given string."""
  storeNumber_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
  contactPerson: String

  """All values that are not equal to given value."""
  contactPerson_not: String

  """All values that are contained in given list."""
  contactPerson_in: [String!]

  """All values that are not contained in given list."""
  contactPerson_not_in: [String!]

  """All values less than the given value."""
  contactPerson_lt: String

  """All values less than or equal the given value."""
  contactPerson_lte: String

  """All values greater than the given value."""
  contactPerson_gt: String

  """All values greater than or equal the given value."""
  contactPerson_gte: String

  """All values containing the given string."""
  contactPerson_contains: String

  """All values not containing the given string."""
  contactPerson_not_contains: String

  """All values starting with the given string."""
  contactPerson_starts_with: String

  """All values not starting with the given string."""
  contactPerson_not_starts_with: String

  """All values ending with the given string."""
  contactPerson_ends_with: String

  """All values not ending with the given string."""
  contactPerson_not_ends_with: String
  contactEmail: String

  """All values that are not equal to given value."""
  contactEmail_not: String

  """All values that are contained in given list."""
  contactEmail_in: [String!]

  """All values that are not contained in given list."""
  contactEmail_not_in: [String!]

  """All values less than the given value."""
  contactEmail_lt: String

  """All values less than or equal the given value."""
  contactEmail_lte: String

  """All values greater than the given value."""
  contactEmail_gt: String

  """All values greater than or equal the given value."""
  contactEmail_gte: String

  """All values containing the given string."""
  contactEmail_contains: String

  """All values not containing the given string."""
  contactEmail_not_contains: String

  """All values starting with the given string."""
  contactEmail_starts_with: String

  """All values not starting with the given string."""
  contactEmail_not_starts_with: String

  """All values ending with the given string."""
  contactEmail_ends_with: String

  """All values not ending with the given string."""
  contactEmail_not_ends_with: String
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  size: String

  """All values that are not equal to given value."""
  size_not: String

  """All values that are contained in given list."""
  size_in: [String!]

  """All values that are not contained in given list."""
  size_not_in: [String!]

  """All values less than the given value."""
  size_lt: String

  """All values less than or equal the given value."""
  size_lte: String

  """All values greater than the given value."""
  size_gt: String

  """All values greater than or equal the given value."""
  size_gte: String

  """All values containing the given string."""
  size_contains: String

  """All values not containing the given string."""
  size_not_contains: String

  """All values starting with the given string."""
  size_starts_with: String

  """All values not starting with the given string."""
  size_not_starts_with: String

  """All values ending with the given string."""
  size_ends_with: String

  """All values not ending with the given string."""
  size_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  address: AddressWhereInput
  deliveryAddress: AddressWhereInput
  brand: BrandWhereInput
  image: FileWhereInput
  language: LanguageWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input StoreWhereUniqueInput {
  id: ID
}

type Subscription {
  store(where: StoreSubscriptionWhereInput): StoreSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  productCategory(where: ProductCategorySubscriptionWhereInput): ProductCategorySubscriptionPayload
  properties(where: PropertiesSubscriptionWhereInput): PropertiesSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  supplier(where: SupplierSubscriptionWhereInput): SupplierSubscriptionPayload
  supportPage(where: SupportPageSubscriptionWhereInput): SupportPageSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  orderTemplate(where: OrderTemplateSubscriptionWhereInput): OrderTemplateSubscriptionPayload
  filterOptions(where: FilterOptionsSubscriptionWhereInput): FilterOptionsSubscriptionPayload
  orderItem(where: OrderItemSubscriptionWhereInput): OrderItemSubscriptionPayload
  rolePermission(where: RolePermissionSubscriptionWhereInput): RolePermissionSubscriptionPayload
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
}

type Supplier implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String!
  products(where: PropertiesWhereInput, orderBy: PropertiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Properties!]
  address: Address!
}

"""A connection to a list of items."""
type SupplierConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupplierEdge]!
  aggregate: AggregateSupplier!
}

input SupplierCreateInput {
  deletedAt: DateTime
  note: String
  name: String!
  products: PropertiesCreateManyWithoutSupplierInput
  address: AddressCreateOneInput!
}

input SupplierCreateOneWithoutProductsInput {
  create: SupplierCreateWithoutProductsInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateWithoutProductsInput {
  deletedAt: DateTime
  note: String
  name: String!
  address: AddressCreateOneInput!
}

"""An edge in a connection."""
type SupplierEdge {
  """The item at the end of the edge."""
  node: Supplier!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupplierOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  name_ASC
  name_DESC
}

type SupplierPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  name: String!
}

type SupplierSubscriptionPayload {
  mutation: MutationType!
  node: Supplier
  updatedFields: [String!]
  previousValues: SupplierPreviousValues
}

input SupplierSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupplierWhereInput
}

input SupplierUpdateInput {
  deletedAt: DateTime
  note: String
  name: String
  products: PropertiesUpdateManyWithoutSupplierInput
  address: AddressUpdateOneRequiredInput
}

input SupplierUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  name: String
}

input SupplierUpdateOneWithoutProductsInput {
  create: SupplierCreateWithoutProductsInput
  connect: SupplierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupplierUpdateWithoutProductsDataInput
  upsert: SupplierUpsertWithoutProductsInput
}

input SupplierUpdateWithoutProductsDataInput {
  deletedAt: DateTime
  note: String
  name: String
  address: AddressUpdateOneRequiredInput
}

input SupplierUpsertWithoutProductsInput {
  update: SupplierUpdateWithoutProductsDataInput!
  create: SupplierCreateWithoutProductsInput!
}

input SupplierWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  products_every: PropertiesWhereInput
  products_some: PropertiesWhereInput
  products_none: PropertiesWhereInput
  address: AddressWhereInput
}

input SupplierWhereUniqueInput {
  id: ID
}

type SupportPage implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
}

"""A connection to a list of items."""
type SupportPageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupportPageEdge]!
  aggregate: AggregateSupportPage!
}

input SupportPageCreateInput {
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
}

"""An edge in a connection."""
type SupportPageEdge {
  """The item at the end of the edge."""
  node: SupportPage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupportPageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type SupportPagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  title: String!
  content: String!
}

type SupportPageSubscriptionPayload {
  mutation: MutationType!
  node: SupportPage
  updatedFields: [String!]
  previousValues: SupportPagePreviousValues
}

input SupportPageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportPageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportPageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportPageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupportPageWhereInput
}

input SupportPageUpdateInput {
  deletedAt: DateTime
  note: String
  title: String
  content: String
}

input SupportPageUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  title: String
  content: String
}

input SupportPageWhereInput {
  """Logical AND on all given filters."""
  AND: [SupportPageWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupportPageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupportPageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
}

input SupportPageWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean!
  phoneNumber: String
  role: Role!
  brand: Brand!
  contactPersonToBrand(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand!]
  stores(where: StoreWhereInput, orderBy: StoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Store!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleCreateOneWithoutUsersInput!
  brand: BrandCreateOneWithoutUsersInput!
  contactPersonToBrand: BrandCreateManyWithoutContactPersonInput
  stores: StoreCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCreatedByInput
}

input UserCreateManyWithoutBrandInput {
  create: [UserCreateWithoutBrandInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutStoresInput {
  create: [UserCreateWithoutStoresInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutContactPersonToBrandInput {
  create: UserCreateWithoutContactPersonToBrandInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBrandInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleCreateOneWithoutUsersInput!
  contactPersonToBrand: BrandCreateManyWithoutContactPersonInput
  stores: StoreCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCreatedByInput
}

input UserCreateWithoutContactPersonToBrandInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleCreateOneWithoutUsersInput!
  brand: BrandCreateOneWithoutUsersInput!
  stores: StoreCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCreatedByInput
}

input UserCreateWithoutNotificationsInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleCreateOneWithoutUsersInput!
  brand: BrandCreateOneWithoutUsersInput!
  contactPersonToBrand: BrandCreateManyWithoutContactPersonInput
  stores: StoreCreateManyWithoutUsersInput
  orders: OrderCreateManyWithoutCreatedByInput
}

input UserCreateWithoutOrdersInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleCreateOneWithoutUsersInput!
  brand: BrandCreateOneWithoutUsersInput!
  contactPersonToBrand: BrandCreateManyWithoutContactPersonInput
  stores: StoreCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutRoleInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  brand: BrandCreateOneWithoutUsersInput!
  contactPersonToBrand: BrandCreateManyWithoutContactPersonInput
  stores: StoreCreateManyWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCreatedByInput
}

input UserCreateWithoutStoresInput {
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleCreateOneWithoutUsersInput!
  brand: BrandCreateOneWithoutUsersInput!
  contactPersonToBrand: BrandCreateManyWithoutContactPersonInput
  notifications: NotificationCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  note_ASC
  note_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  sendNotificationToEmail_ASC
  sendNotificationToEmail_DESC
  phoneNumber_ASC
  phoneNumber_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  note: String
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  sendNotificationToEmail: Boolean!
  phoneNumber: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  brand: BrandUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  stores: StoreUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  brand: BrandUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  stores: StoreUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
}

input UserUpdateManyWithoutBrandInput {
  create: [UserCreateWithoutBrandInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBrandInput!]
}

input UserUpdateManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoleInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoleInput!]
}

input UserUpdateManyWithoutStoresInput {
  create: [UserCreateWithoutStoresInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutStoresInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutStoresInput!]
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneWithoutContactPersonToBrandInput {
  create: UserCreateWithoutContactPersonToBrandInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutContactPersonToBrandDataInput
  upsert: UserUpsertWithoutContactPersonToBrandInput
}

input UserUpdateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateWithoutBrandDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  stores: StoreUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutContactPersonToBrandDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  brand: BrandUpdateOneRequiredWithoutUsersInput
  stores: StoreUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutNotificationsDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  brand: BrandUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  stores: StoreUpdateManyWithoutUsersInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutOrdersDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  brand: BrandUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  stores: StoreUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutRoleDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  brand: BrandUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  stores: StoreUpdateManyWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutStoresDataInput {
  deletedAt: DateTime
  note: String
  email: String
  password: String
  firstName: String
  lastName: String
  sendNotificationToEmail: Boolean
  phoneNumber: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  brand: BrandUpdateOneRequiredWithoutUsersInput
  contactPersonToBrand: BrandUpdateManyWithoutContactPersonInput
  notifications: NotificationUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCreatedByInput
}

input UserUpdateWithWhereUniqueWithoutBrandInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutBrandDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoleDataInput!
}

input UserUpdateWithWhereUniqueWithoutStoresInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStoresDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutContactPersonToBrandInput {
  update: UserUpdateWithoutContactPersonToBrandDataInput!
  create: UserCreateWithoutContactPersonToBrandInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserUpsertWithWhereUniqueWithoutBrandInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutBrandDataInput!
  create: UserCreateWithoutBrandInput!
}

input UserUpsertWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoleDataInput!
  create: UserCreateWithoutRoleInput!
}

input UserUpsertWithWhereUniqueWithoutStoresInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStoresDataInput!
  create: UserCreateWithoutStoresInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  sendNotificationToEmail: Boolean

  """All values that are not equal to given value."""
  sendNotificationToEmail_not: Boolean
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  role: RoleWhereInput
  brand: BrandWhereInput
  contactPersonToBrand_every: BrandWhereInput
  contactPersonToBrand_some: BrandWhereInput
  contactPersonToBrand_none: BrandWhereInput
  stores_every: StoreWhereInput
  stores_some: StoreWhereInput
  stores_none: StoreWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
